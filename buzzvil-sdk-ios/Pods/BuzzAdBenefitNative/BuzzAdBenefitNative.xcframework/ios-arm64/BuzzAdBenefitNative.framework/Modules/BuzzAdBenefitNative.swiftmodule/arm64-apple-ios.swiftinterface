// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BuzzAdBenefitNative
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import BuzzAdBenefitBase
@_exported import BuzzAdBenefitNative
import BuzzRxSwift
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class BZVDefaultCtaView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) final public func setCtaBackgroundColor(_ ctaBackgroundColor: BuzzAdBenefitBase.BZVControlStateResource<UIKit.UIColor>)
  @objc @_Concurrency.MainActor(unsafe) final public func setCtaTextColor(_ ctaTextColor: BuzzAdBenefitBase.BZVControlStateResource<UIKit.UIColor>)
  @objc @_Concurrency.MainActor(unsafe) final public func setRewardImage(_ rewardImage: UIKit.UIImage)
  @objc @_Concurrency.MainActor(unsafe) final public func setParticipatedImage(_ participatedImage: UIKit.UIImage)
  @objc deinit
}
extension BuzzAdBenefitNative.BZVDefaultCtaView : BuzzAdBenefitNative.BZVCtaViewProtocol {
  @_Concurrency.MainActor(unsafe) @objc final public func renderRewardNotAvailableViewState(withCtaText ctaText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc final public func renderRewardAvailableViewState(withCtaText ctaText: Swift.String, reward: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc final public func renderParticipatingViewState(withCtaText ctaText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc final public func renderParticipatedViewState(withCtaText ctaText: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAd2ViewBinder : ObjectiveC.NSObject {
  @objc public func subscribeEvents(onRequest: @escaping () -> Swift.Void = {}, onNext: @escaping (BuzzAdBenefitNative.BZVNativeAd2) -> Swift.Void = { _ in }, onError: @escaping (_ error: Foundation.NSError) -> Swift.Void = { _ in }, onCompleted: @escaping () -> Swift.Void = {})
  @objc public func subscribeAdEvents(onImpressed: @escaping (BuzzAdBenefitNative.BZVNativeAd2) -> Swift.Void = { _ in }, onClicked: @escaping (BuzzAdBenefitNative.BZVNativeAd2) -> Swift.Void = { _ in }, onRewardRequested: @escaping (BuzzAdBenefitNative.BZVNativeAd2) -> Swift.Void = { _ in }, onRewarded: @escaping (BuzzAdBenefitNative.BZVNativeAd2, BuzzAdBenefitNative.BZVRewardResult) -> Swift.Void = { _, _ in }, onParticipated: @escaping (BuzzAdBenefitNative.BZVNativeAd2) -> Swift.Void = { _ in })
  @objc public func bind()
  @objc public func setPool(_ pool: BuzzAdBenefitNative.BZVNativeAd2Pool, at index: Swift.Int)
  @objc public func unbind()
  @objc deinit
}
extension BuzzAdBenefitNative.BZVNativeAd2ViewBinder {
  @objc @available(*, deprecated, message: "Use subscribeEvents() and bind() instead.")
  dynamic public func bind(onRequest: @escaping () -> Swift.Void = {}, onSuccess: @escaping () -> Swift.Void = {}, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void = { _ in })
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVNativeAdRequest : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol BZVNativeAdEventDelegate : ObjectiveC.NSObjectProtocol {
  @objc(didImpressAd:) func didImpress(_ nativeAd: BuzzAdBenefitNative.BZVNativeAd)
  @objc(didClickAd:) func didClick(_ nativeAd: BuzzAdBenefitNative.BZVNativeAd)
  @objc(didRequestRewardForAd:) func didRequestReward(for ad: BuzzAdBenefitNative.BZVNativeAd)
  @objc(didRewardForAd:withResult:) func didReward(for Ad: BuzzAdBenefitNative.BZVNativeAd, with result: BuzzAdBenefitNative.BZVRewardResult)
  @objc func didParticipateAd(_ nativeAd: BuzzAdBenefitNative.BZVNativeAd)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAd : ObjectiveC.NSObject {
  @objc weak public var delegate: (any BuzzAdBenefitNative.BZVNativeAdEventDelegate)?
  @objc weak public var internalDelegate: (any BuzzAdBenefitNative.BZVNativeAdEventDelegate)?
  @objc final public let ad: BuzzAdBenefitBase.BABAd
  @objc(nativeAdWithBABAd:) public static func nativeAd(ad: BuzzAdBenefitBase.BABAd) -> BuzzAdBenefitNative.BZVNativeAd
  @objc public var Id: Swift.String {
    @objc get
  }
  @objc public var title: Swift.String {
    @objc get
  }
  @objc public var body: Swift.String {
    @objc get
  }
  @objc public var iconURL: Swift.String {
    @objc get
  }
  @objc public var callToAction: Swift.String {
    @objc get
  }
  @objc public var revenueType: BuzzAdBenefitNative.BZVRevenueType {
    @objc get
  }
  @objc public var product: BuzzAdBenefitNative.BZVNativeAdProduct {
    @objc get
  }
  @objc public var totalReward: Swift.Double {
    @objc get
  }
  @objc public var availableReward: Swift.Double {
    @objc get
  }
  @objc public var isCps: Swift.Bool {
    @objc get
  }
  @objc public var adnetworkCampaignType: Swift.Int {
    @objc get
  }
  @objc public var isActionType: Swift.Bool {
    @objc get
  }
  @objc public var isClicked: Swift.Bool {
    @objc get
  }
  @objc public var isDeepLink: Swift.Bool {
    @objc get
  }
  @objc public var isParticipated: Swift.Bool {
    @objc get
  }
  @objc public var isRewardReceived: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public enum BuzzMediaViewAspect : Swift.Int {
  case fit
  case fill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class BuzzMediaView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var fillMode: BuzzAdBenefitNative.BuzzMediaViewAspect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func loadImage(atUrl url: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public func loadVideo(atUrl url: Foundation.URL, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func loadVideo(withBuzzPlayer player: any BuzzAdBenefitNative.BuzzPlayerProtocol, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public func loadVideo(atVastTag vastTag: Swift.String, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func didEnterFullscreen()
  @objc @_Concurrency.MainActor(unsafe) public func didExitFullscreen()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @objc deinit
}
extension BuzzAdBenefitNative.BuzzMediaView : BuzzAdBenefitNative.BABImpressionTrackableView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func shouldTrackImpression() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewDidImpressed()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewBecomeVisible()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewBecomeInvisible()
}
public typealias BZVNativeAdViewBinderBlock = (BuzzAdBenefitNative.BZVNativeAdViewBinderBuilder) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVNativeAdViewBinderBuilder : ObjectiveC.NSObject {
  @objc public var nativeAdView: BuzzAdBenefitNative.BZVNativeAdView?
  @objc public var mediaView: BuzzAdBenefitNative.BZVMediaView?
  @objc public var ctaView: (any UIKit.UIView & BuzzAdBenefitNative.BZVCtaViewProtocol)?
  @objc public var titleLabel: UIKit.UILabel?
  @objc public var descriptionLabel: UIKit.UILabel?
  @objc public var iconImageView: UIKit.UIImageView?
  @objc public var clickableViews: [UIKit.UIView]?
  @objc override dynamic public init()
  @objc deinit
}
extension BuzzAdBenefitNative.BZVNativeAdViewBinder {
  @objc(viewBinderWithBlock:) public static func viewBinder(with block: (BuzzAdBenefitNative.BZVNativeAdViewBinderBuilder) -> Swift.Void) -> BuzzAdBenefitNative.BZVNativeAdViewBinder
  @objc convenience dynamic public init(block: (BuzzAdBenefitNative.BZVNativeAdViewBinderBuilder) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAdProduct : ObjectiveC.NSObject {
  @objc final public let price: Swift.Float
  @objc final public let discountedPrice: Swift.Float
  @objc final public let category: Swift.String
  @objc final public let isSpotlighted: Swift.Bool
  @objc public static func product(price: Swift.Float, discountedPrice: Swift.Float, category: Swift.String, isSpotlighted: Swift.Bool) -> BuzzAdBenefitNative.BZVNativeAdProduct
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class BZVNativeAdView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var videoDelegate: (any BuzzAdBenefitNative.BZVNativeAdViewVideoDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var mediaView: BuzzAdBenefitNative.BZVMediaView?
  @objc @_Concurrency.MainActor(unsafe) public var clickableViews: [UIKit.UIView]
  @objc @_Concurrency.MainActor(unsafe) public func setEventSessionProvider(_ eventSessionProvider: any BuzzAdBenefitNative.BZVNativeAdEventSessionProvider)
  @objc(setNativeAd:) @_Concurrency.MainActor(unsafe) public func setNativeAd(nativeAd: BuzzAdBenefitNative.BZVNativeAd)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BuzzAdBenefitNative.BZVNativeAdView : BuzzAdBenefitNative.BABFullscreenVideoViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func fullscreenVideoViewControllerDidDismiss(_ fullscreenVideoViewController: BuzzAdBenefitNative.BABFullscreenVideoViewController, currentFullScreenVideoAd: BuzzAdBenefitBase.BABAd)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func fullscreenVideoViewControllerLearnMoreButtonTapped(_ fullscreenViewViewController: BuzzAdBenefitNative.BABFullscreenVideoViewController)
}
extension BuzzAdBenefitNative.BZVNativeAdView : BuzzAdBenefitNative.BABImpressionTrackableView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func shouldTrackImpression() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewDidImpressed()
}
extension BuzzAdBenefitNative.BZVNativeAdView : BuzzAdBenefitNative.BABNativeAdViewProtocol {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderImageMedia(at url: Foundation.URL!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderVideoMedia(at url: Foundation.URL!, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL!, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderVideoMedia(atVastTag vastTag: Swift.String!, autoPlay: Swift.Bool, thumbnailImageUrl url: Foundation.URL!, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func switchToFullscreen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleImpression()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleClick()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleVideoPlayFinish()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleLandingPageOpen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleRewardStart()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleRewardSuccess()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleRewardFailure(_ result: BuzzAdBenefitBase.BABRewardResult)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleParticipation()
}
extension BuzzAdBenefitNative.BZVNativeAdView : BuzzAdBenefitNative.BuzzVideoPlayerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerShouldAutoPlay(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerShouldPlay(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedPlayButton(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer, wasPlaying: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedMuteButton(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer, wasMuted: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedFullscreen(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedLearnMore(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidResumeVideo(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerWillStartPlayingVideo(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidFinishPlayingVideo(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer, atSecond second: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerMinimumPlayTime(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerShouldShowRemainingTime(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidPassMinimumPlayTime(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer, atSecond second: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidPause(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer, atSecond second: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerWillReplayVideo(_ videoPlayer: BuzzAdBenefitNative.BuzzVideoPlayer)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAdsRequest : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAdViewBinder : ObjectiveC.NSObject {
  @objc(bindWithNativeAd:) public func bind(with nativeAd: BuzzAdBenefitNative.BZVNativeAd)
  @objc deinit
}
extension BuzzAdBenefitNative.BZVNativeAdViewBinder : BuzzAdBenefitNative.BZVNativeAdEventDelegate {
  @objc dynamic public func didImpress(_ nativeAd: BuzzAdBenefitNative.BZVNativeAd)
  @objc dynamic public func didClick(_ nativeAd: BuzzAdBenefitNative.BZVNativeAd)
  @objc dynamic public func didRequestReward(for ad: BuzzAdBenefitNative.BZVNativeAd)
  @objc dynamic public func didReward(for Ad: BuzzAdBenefitNative.BZVNativeAd, with result: BuzzAdBenefitNative.BZVRewardResult)
  @objc dynamic public func didParticipateAd(_ nativeAd: BuzzAdBenefitNative.BZVNativeAd)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVBuzzAdNative : ObjectiveC.NSObject {
  @objc(nativeWithUnitId:) public static func native(with unitId: Swift.String) -> BuzzAdBenefitNative.BZVBuzzAdNative
  @objc(initWithUnitId:) convenience public init(unitId: Swift.String)
  @objc(initWithUnitId:autoResetCursor:) convenience public init(unitId: Swift.String, autoResetCursor: Swift.Bool)
  @objc(loadAdWithAdRequest:onSuccess:onFailure:) public func loadAd(with adRequest: BuzzAdBenefitNative.BZVNativeAdRequest, onSuccess: @escaping (_ nativeAd: BuzzAdBenefitNative.BZVNativeAd) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc(loadAdsWithAdsRequest:onSuccess:onFailure:) public func loadAds(with adsRequest: BuzzAdBenefitNative.BZVNativeAdsRequest, onSuccess: @escaping (_ nativeAd: [BuzzAdBenefitNative.BZVNativeAd]) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc public func loadAds(with adsRequest: BuzzAdBenefitNative.BZVNativeAdsRequest, requestTarget: Swift.String, onSuccess: @escaping (_ nativeAd: [BuzzAdBenefitNative.BZVNativeAd]) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc public func loadAvailableRewards(with adsRequest: BuzzAdBenefitNative.BZVNativeAdsRequest, onSuccess: @escaping (_ availableReward: Swift.Int) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc public func resetCursor()
  @objc deinit
}
extension BuzzAdBenefitNative.BZVNativeAd2ViewBinder {
  final public class Builder {
    public init(unitId: Swift.String)
    final public func nativeAd2View(_ nativeAd2View: BuzzAdBenefitNative.BZVNativeAd2View) -> Self
    final public func mediaView(_ mediaView: BuzzAdBenefitNative.BZVMediaView) -> Self
    final public func iconImageView(_ iconImageView: UIKit.UIImageView) -> Self
    final public func titleLabel(_ titleLabel: UIKit.UILabel) -> Self
    final public func descriptionLabel(_ descriptionLabel: UIKit.UILabel) -> Self
    final public func ctaView(_ ctaView: any UIKit.UIView & BuzzAdBenefitNative.BZVCtaViewProtocol) -> Self
    final public func setClickableViews(_ clickableViews: [UIKit.UIView]) -> Self
    final public func build() -> BuzzAdBenefitNative.BZVNativeAd2ViewBinder
    @objc deinit
  }
}
extension BuzzAdBenefitNative.BZVNativeAd2ViewBinder {
  public typealias BZVNativeAd2ViewBinderBlock = (BuzzAdBenefitNative.BZVNativeAd2ViewBinderBuilder) -> Swift.Void
  @objc(viewBinderWithBlock:) public static func viewBinder(with block: (BuzzAdBenefitNative.BZVNativeAd2ViewBinderBuilder) -> Swift.Void) -> BuzzAdBenefitNative.BZVNativeAd2ViewBinder
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class BZVNativeAd2ViewBinderBuilder : ObjectiveC.NSObject {
  @objc final public var nativeAd2View: BuzzAdBenefitNative.BZVNativeAd2View?
  @objc final public var mediaView: BuzzAdBenefitNative.BZVMediaView?
  @objc final public var iconImageView: UIKit.UIImageView?
  @objc final public var titleLabel: UIKit.UILabel?
  @objc final public var descriptionLabel: UIKit.UILabel?
  @objc final public var ctaView: (any UIKit.UIView & BuzzAdBenefitNative.BZVCtaViewProtocol)?
  @objc final public var clickableViews: [UIKit.UIView]?
  @objc final public var unitId: Swift.String?
  @objc deinit
}
@objc public enum BZVRewardResult : Swift.Int {
  case success = 0
  case alreadyParticipated
  case browserNotLaunched
  case tooShortToParticipate
  case networkError
  case clientError
  case serverError
  case timeout
  case missingReward
  case unknownError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class BABCtaPresenter : ObjectiveC.NSObject {
  @objc public init(ctaView: any BuzzAdBenefitNative.BZVCtaViewProtocol)
  @objc(bindWithNativeAd:) public func bind(nativeAd: BuzzAdBenefitNative.BZVNativeAd)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class BZVMediaView : BuzzAdBenefitNative.BuzzMediaView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BABNativeAdMapper : ObjectiveC.NSObject {
  @objc(transformFromBABAd:) public func transform(ad: BuzzAdBenefitBase.BABAd) -> BuzzAdBenefitNative.BZVNativeAd
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class BZVNativeAd2 : ObjectiveC.NSObject {
  @objc final public var title: Swift.String {
    @objc get
  }
  @objc final public var body: Swift.String {
    @objc get
  }
  @objc final public var reward: Swift.Int {
    @objc get
  }
  @objc final public var revenueType: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BZVNativeAd2View : BuzzAdBenefitNative.BZVNativeAdView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias BZVNativeAdsRequestBuilderBlock = (BuzzAdBenefitNative.BZVNativeAdsRequestBuilder) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVNativeAdsRequestBuilder : ObjectiveC.NSObject {
  @objc public var adCount: Foundation.NSNumber?
  @objc public var revenueTypes: [Swift.String]?
  @objc public var categories: [Swift.String]?
  @objc public var cpsCategories: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
}
extension BuzzAdBenefitNative.BZVNativeAdsRequest {
  @objc(requestWithBlock:) public static func request(block: (BuzzAdBenefitNative.BZVNativeAdsRequestBuilder) -> Swift.Void) -> BuzzAdBenefitNative.BZVNativeAdsRequest
  @objc convenience dynamic public init(block: (BuzzAdBenefitNative.BZVNativeAdsRequestBuilder) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class BZVNativeAd2Pool : ObjectiveC.NSObject {
  @objc public init(unitId: Swift.String)
  @objc final public func loadAds(count: Swift.Int = 1, completionHandler: @escaping (Swift.Int) -> Swift.Void, errorHandler: @escaping (Foundation.NSError) -> Swift.Void)
  @objc deinit
}
extension BuzzAdBenefitNative.BuzzMediaViewAspect : Swift.Equatable {}
extension BuzzAdBenefitNative.BuzzMediaViewAspect : Swift.Hashable {}
extension BuzzAdBenefitNative.BuzzMediaViewAspect : Swift.RawRepresentable {}
extension BuzzAdBenefitNative.BZVRewardResult : Swift.Equatable {}
extension BuzzAdBenefitNative.BZVRewardResult : Swift.Hashable {}
extension BuzzAdBenefitNative.BZVRewardResult : Swift.RawRepresentable {}
