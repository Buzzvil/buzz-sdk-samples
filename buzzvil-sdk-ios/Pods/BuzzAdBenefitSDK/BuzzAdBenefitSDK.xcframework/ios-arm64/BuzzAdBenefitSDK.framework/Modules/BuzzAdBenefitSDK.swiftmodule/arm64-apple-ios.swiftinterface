// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BuzzAdBenefitSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AdSupport
import AppTrackingTransparency
@_exported import BuzzAdBenefitSDK
import BuzzRxSwift
import Foundation
import SDWebImage
import Swift
import UIKit
import WebKit
import WidgetKit
import _Concurrency
import _StringProcessing
@objc(BABBaseRewardEventType) public enum BaseRewardEventType : Swift.Int {
  case landed
  case action
  case walked
  case won
  case opened
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol BZVBuzzAdInterstitialDelegate : ObjectiveC.NSObjectProtocol {
  @objc(BZVBuzzAdInterstitialDidLoadAd:) func bzvBuzzAdInterstitialDidLoadAd(_ interstitial: BuzzAdBenefitSDK.BZVBuzzAdInterstitial)
  @objc(BZVBuzzAdInterstitialDidFailToLoadAd:withError:) func bzvBuzzAdInterstitialDidFail(toLoadAd interstitial: BuzzAdBenefitSDK.BZVBuzzAdInterstitial, withError: Swift.Error)
  @objc(BZVBuzzAdInterstitialDidDismiss:) func bzvBuzzAdInterstitialDidDismiss(_ viewController: UIKit.UIViewController)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVBuzzAdInterstitial : ObjectiveC.NSObject {
  @objc weak public var delegate: BuzzAdBenefitSDK.BZVBuzzAdInterstitialDelegate?
  @objc public func load()
  @objc(presentOnViewController:) public func present(on viewController: UIKit.UIViewController)
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVBuzzAdInterstitial {
  @objc dynamic public func interstitialViewControllerDidFinish(_ viewController: UIKit.UIViewController)
}
@objc(BABUserGenderDTO) public enum UserGenderDTO : Swift.Int {
  case unknown
  case male
  case female
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class RemoteConfigService {
  public init(userDefaults: Foundation.UserDefaults)
  public func listConfigs(unitId: Swift.String) -> BuzzRxSwift.Single<BuzzAdBenefitSDK.ConfigList>
  public func getBooleanConfig(forKey key: BuzzAdBenefitSDK.ConfigKey, unitId: Swift.String) -> BuzzRxSwift.Single<Swift.Bool>
  public func getIntegerConfig(forKey key: BuzzAdBenefitSDK.ConfigKey, unitId: Swift.String) -> BuzzRxSwift.Single<Swift.Int>
  public func getStringConfig(forKey key: BuzzAdBenefitSDK.ConfigKey, unitId: Swift.String) -> BuzzRxSwift.Single<Swift.String>
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BABDeepLinkParser) public class DeepLinkParser : ObjectiveC.NSObject {
  @objc public func parse(url: Foundation.URL) throws -> BuzzAdBenefitSDK.DeepLink
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class BZVMediaView : BuzzAdBenefitSDK.BuzzMediaView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias BZVNativeAdViewBinderBlock = (BuzzAdBenefitSDK.BZVNativeAdViewBinderBuilder) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVNativeAdViewBinderBuilder : ObjectiveC.NSObject {
  @objc public var nativeAdView: BuzzAdBenefitSDK.BZVNativeAdView?
  @objc public var mediaView: BuzzAdBenefitSDK.BZVMediaView?
  @objc public var ctaView: (UIKit.UIView & BuzzAdBenefitSDK.BZVCtaViewProtocol)?
  @objc public var titleLabel: UIKit.UILabel?
  @objc public var descriptionLabel: UIKit.UILabel?
  @objc public var iconImageView: UIKit.UIImageView?
  @objc public var clickableViews: [UIKit.UIView]?
  @objc override dynamic public init()
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVNativeAdViewBinder {
  @objc(viewBinderWithBlock:) public static func viewBinder(with block: (BuzzAdBenefitSDK.BZVNativeAdViewBinderBuilder) -> Swift.Void) -> BuzzAdBenefitSDK.BZVNativeAdViewBinder
  @objc convenience dynamic public init(block: (BuzzAdBenefitSDK.BZVNativeAdViewBinderBuilder) -> Swift.Void)
}
@objc(BABUserInterfaceStyleOverridable) public protocol UserInterfaceStyleOverridable {
  @objc func bab_needsUpdateCGColors(previousTraitCollection: UIKit.UITraitCollection?) -> Swift.Bool
  @objc func bab_overrideUserInterfaceStyle()
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func bab_presentAlert(config: BuzzAdBenefitSDK.AlertConfig)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BABDevice) final public class Device : ObjectiveC.NSObject {
  @objc public static let shared: BuzzAdBenefitSDK.Device
  @objc final public var advertisingIdentifier: Swift.String {
    @objc get
  }
  @objc final public var identifierForVender: Swift.String? {
    @objc get
  }
  @objc final public func toDictionary() -> [Swift.String : Swift.String]
  @objc deinit
}
@objc(BABDeepLinkSource) public enum DeepLinkSource : Swift.Int, Swift.RawRepresentable {
  case widget
  public typealias RawValue = Swift.String
  public var rawValue: BuzzAdBenefitSDK.DeepLinkSource.RawValue {
    get
  }
  public init?(rawValue: BuzzAdBenefitSDK.DeepLinkSource.RawValue)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class BZVNativeAdView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var videoDelegate: BuzzAdBenefitSDK.BZVNativeAdViewVideoDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var mediaView: BuzzAdBenefitSDK.BZVMediaView?
  @objc @_Concurrency.MainActor(unsafe) public var clickableViews: [UIKit.UIView]
  @objc @_Concurrency.MainActor(unsafe) public func setEventSessionProvider(_ eventSessionProvider: BuzzAdBenefitSDK.BZVNativeAdEventSessionProvider)
  @objc(setNativeAd:) @_Concurrency.MainActor(unsafe) public func setNativeAd(nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVNativeAdView : BuzzAdBenefitSDK.BABFullscreenVideoViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func fullscreenVideoViewControllerDidDismiss(_ fullscreenVideoViewController: BuzzAdBenefitSDK.BABFullscreenVideoViewController, currentFullScreenVideoAd: BuzzAdBenefitSDK.BABAd)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func fullscreenVideoViewControllerLearnMoreButtonTapped(_ fullscreenViewViewController: BuzzAdBenefitSDK.BABFullscreenVideoViewController)
}
extension BuzzAdBenefitSDK.BZVNativeAdView : BuzzAdBenefitSDK.BABImpressionTrackableView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func shouldTrackImpression() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewDidImpressed()
}
extension BuzzAdBenefitSDK.BZVNativeAdView : BuzzAdBenefitSDK.BABNativeAdViewProtocol {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderImageMedia(at url: Foundation.URL!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderVideoMedia(at url: Foundation.URL!, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL!, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func renderVideoMedia(atVastTag vastTag: Swift.String!, autoPlay: Swift.Bool, thumbnailImageUrl url: Foundation.URL!, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func switchToFullscreen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleImpression()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleClick()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleVideoPlayFinish()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleLandingPageOpen()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleRewardStart()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleRewardSuccess()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleRewardFailure(_ result: BuzzAdBenefitSDK.BABRewardResult)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func handleParticipation()
}
extension BuzzAdBenefitSDK.BZVNativeAdView : BuzzAdBenefitSDK.BuzzVideoPlayerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerShouldAutoPlay(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerShouldPlay(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedPlayButton(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer, wasPlaying: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedMuteButton(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer, wasMuted: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedFullscreen(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidTappedLearnMore(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidResumeVideo(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerWillStartPlayingVideo(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidFinishPlayingVideo(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer, atSecond second: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerMinimumPlayTime(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerShouldShowRemainingTime(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidPassMinimumPlayTime(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer, atSecond second: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerDidPause(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer, atSecond second: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func buzzVideoPlayerWillReplayVideo(_ videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVNativeAdRequest : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVUserPreferences : ObjectiveC.NSObject {
  @objc deinit
}
extension Foundation.NSAttributedString {
  public static func bab_attributedString(format: Foundation.NSAttributedString, args: Foundation.NSAttributedString...) -> Foundation.NSAttributedString
}
extension BuzzRxSwift.PrimitiveSequence where Trait == BuzzRxSwift.SingleTrait, Element == BuzzAdBenefitSDK.Response {
  public static func createResponse(from urlRequest: Foundation.URLRequest) -> BuzzRxSwift.Single<BuzzAdBenefitSDK.Response>
  public func filter<R>(statusCodes: R) -> BuzzRxSwift.Single<Element> where R : Swift.RangeExpression, R.Bound == Swift.Int
  public func filterSuccessfulStatusCodes() -> BuzzRxSwift.Single<Element>
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAd2ViewBinder : ObjectiveC.NSObject {
  @objc public func subscribeEvents(onRequest: @escaping () -> Swift.Void = {}, onNext: @escaping (BuzzAdBenefitSDK.BZVNativeAd2) -> Swift.Void = { _ in }, onError: @escaping (_ error: Foundation.NSError) -> Swift.Void = { _ in }, onCompleted: @escaping () -> Swift.Void = {})
  @objc public func subscribeAdEvents(onImpressed: @escaping (BuzzAdBenefitSDK.BZVNativeAd2) -> Swift.Void = { _ in }, onClicked: @escaping (BuzzAdBenefitSDK.BZVNativeAd2) -> Swift.Void = { _ in }, onRewardRequested: @escaping (BuzzAdBenefitSDK.BZVNativeAd2) -> Swift.Void = { _ in }, onRewarded: @escaping (BuzzAdBenefitSDK.BZVNativeAd2, BuzzAdBenefitSDK.BZVRewardResult) -> Swift.Void = { _, _ in }, onParticipated: @escaping (BuzzAdBenefitSDK.BZVNativeAd2) -> Swift.Void = { _ in })
  @objc public func bind()
  @objc public func setPool(_ pool: BuzzAdBenefitSDK.BZVNativeAd2Pool, at index: Swift.Int)
  @objc public func unbind()
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVNativeAd2ViewBinder {
  @objc @available(*, deprecated, message: "Use subscribeEvents() and bind() instead.")
  dynamic public func bind(onRequest: @escaping () -> Swift.Void = {}, onSuccess: @escaping () -> Swift.Void = {}, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void = { _ in })
}
@objc(BABBIEventTracker) public protocol BIEventTracker {
  @objc func track(_ event: BuzzAdBenefitSDK.BIEvent)
  @objc func track(_ event: BuzzAdBenefitSDK.BIEvent, unitId: Swift.String)
}
extension UIKit.UIImage {
  @objc public static func bab_dynamicImage(light: UIKit.UIImage, dark: UIKit.UIImage) -> UIKit.UIImage
}
public protocol WidgetInstallChecker {
  func isInstalled(_ kind: BuzzAdBenefitSDK.WidgetKind) -> BuzzRxSwift.Observable<Swift.Bool>
}
extension UIKit.UIView : BuzzAdBenefitSDK.UserInterfaceStyleOverridable {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bab_overrideUserInterfaceStyle()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bab_needsUpdateCGColors(previousTraitCollection: UIKit.UITraitCollection?) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BABImageLoader) public class ImageLoader : ObjectiveC.NSObject {
  public static func loadImage(from urlString: Swift.String) -> BuzzRxSwift.Observable<UIKit.UIImage>
  public static func loadImage(from url: Foundation.URL) -> BuzzRxSwift.Observable<UIKit.UIImage>
  @objc(loadImageFromURL:onImageView:) public static func loadImage(from url: Foundation.URL, on imageView: UIKit.UIImageView)
  @objc deinit
}
@objc(BABBaseRewardResourceType) public enum BaseRewardResourceType : Swift.Int {
  case ad
  case article
  case pedometer
  case lottery
  case feed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class URLRequestBuilder {
  public enum ContentType : Swift.String {
    case json
    case urlEncoded
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Method : Swift.String {
    case post
    case get
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init()
  final public func withMethod(_ method: BuzzAdBenefitSDK.URLRequestBuilder.Method) -> BuzzAdBenefitSDK.URLRequestBuilder
  final public func withBaseUrl(_ baseUrl: Swift.String) -> Self
  final public func withHeaders(_ headers: [Swift.String : Swift.String]) -> Self
  final public func withPath(_ path: Swift.String) -> Self
  final public func withQueryItems(_ queryItems: [Foundation.URLQueryItem]) -> Self
  final public func withBody<T>(_ body: T, contentType: BuzzAdBenefitSDK.URLRequestBuilder.ContentType) -> Self where T : Swift.Encodable
  final public func build() throws -> Foundation.URLRequest
  @objc deinit
}
extension BuzzAdBenefitSDK.BABImage {
  @objc public static var arrow_left: UIKit.UIImage {
    @objc get
  }
  @objc public static var arrow_up: UIKit.UIImage {
    @objc get
  }
  @objc public static var check: UIKit.UIImage {
    @objc get
  }
  @objc public static var checkbox_checked: UIKit.UIImage {
    @objc get
  }
  @objc public static var checkbox_unchecked: UIKit.UIImage {
    @objc get
  }
  @objc public static var chevron_left: UIKit.UIImage {
    @objc get
  }
  @objc public static var chevron_right: UIKit.UIImage {
    @objc get
  }
  @objc public static var close: UIKit.UIImage {
    @objc get
  }
  @objc public static var close_circle: UIKit.UIImage {
    @objc get
  }
  @objc public static var empty: UIKit.UIImage {
    @objc get
  }
  @objc public static var gift: UIKit.UIImage {
    @objc get
  }
  @objc public static var help: UIKit.UIImage {
    @objc get
  }
  @objc public static var screen_full: UIKit.UIImage {
    @objc get
  }
  @objc public static var tooltip: UIKit.UIImage {
    @objc get
  }
  @objc public static var volume_mute: UIKit.UIImage {
    @objc get
  }
  @objc public static var volume_on: UIKit.UIImage {
    @objc get
  }
}
extension UIKit.UIWindow {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func bab_topViewController() -> UIKit.UIViewController?
}
extension BuzzAdBenefitSDK.BABImage {
  @objc public static var article: UIKit.UIImage {
    @objc get
  }
  @objc public static var calendar_active: UIKit.UIImage {
    @objc get
  }
  @objc public static var calendar_inactive: UIKit.UIImage {
    @objc get
  }
  @objc public static var coin: UIKit.UIImage {
    @objc get
  }
  @objc public static var coin_check: UIKit.UIImage {
    @objc get
  }
  @objc public static var coin_empty: UIKit.UIImage {
    @objc get
  }
  @objc public static var error: UIKit.UIImage {
    @objc get
  }
  @objc public static var feed_daily_reward_point: UIKit.UIImage {
    @objc get
  }
  @objc public static var feed_empty: UIKit.UIImage {
    @objc get
  }
  @objc public static var feed_empty_privacy: UIKit.UIImage {
    @objc get
  }
  @objc public static var feed_promotion_creative: UIKit.UIImage {
    @objc get
  }
  @objc public static var feed_promotion_icon: UIKit.UIImage {
    @objc get
  }
  @objc public static var gift_box_closed: UIKit.UIImage {
    @objc get
  }
  @objc public static var gift_box_opened: UIKit.UIImage {
    @objc get
  }
  @objc public static var gift_with_coin: UIKit.UIImage {
    @objc get
  }
  @objc public static var learn_more: UIKit.UIImage {
    @objc get
  }
  @objc public static var pause: UIKit.UIImage {
    @objc get
  }
  @objc public static var play: UIKit.UIImage {
    @objc get
  }
  @objc public static var replay: UIKit.UIImage {
    @objc get
  }
  @objc public static var shining_coins: UIKit.UIImage {
    @objc get
  }
  @objc public static var total_reward_widget: UIKit.UIImage {
    @objc get
  }
  @objc public static var widget_tutorial_step1: UIKit.UIImage {
    @objc get
  }
  @objc public static var widget_tutorial_step2: UIKit.UIImage {
    @objc get
  }
  @objc public static var widget_tutorial_step3: UIKit.UIImage {
    @objc get
  }
}
@objc(BABUserProfileDTO) public class UserProfileDTO : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let gender: BuzzAdBenefitSDK.UserGenderDTO
  @objc final public let birthYear: Swift.Int
  @objc public init(userId: Swift.String, gender: BuzzAdBenefitSDK.UserGenderDTO, birthYear: Swift.Int)
  @objc public func toDictionary() -> [Swift.String : Swift.String]
  @objc deinit
}
public protocol DailyRewardService {
  func getState(unitId: Swift.String) -> BuzzRxSwift.Observable<BuzzAdBenefitSDK.DailyRewardPageDTO>
  func claimReward(unitId: Swift.String, rewardPath: Swift.String) -> BuzzRxSwift.Observable<BuzzAdBenefitSDK.DailyRewardPageDTO>
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BABConfigMapper : ObjectiveC.NSObject {
  @objc public func transform(config: BuzzAdBenefitSDK.BZVConfig) -> BuzzAdBenefitSDK.BABConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BABUserProfileMapper : ObjectiveC.NSObject {
  @objc public func transform(loginRequest: BuzzAdBenefitSDK.BZVLoginRequest) -> BuzzAdBenefitSDK.UserProfileDTO
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func bab_presentWidgetTutorial(config: BuzzAdBenefitSDK.WidgetTutorialViewConfig, delegate: BuzzAdBenefitSDK.WidgetTutorialViewControllerDelegate?)
}
@objc public enum BZVBuzzAdInterstitialType : Swift.Int {
  case dialog
  case bottomSheet
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func bab_aspectRatio() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public func bab_reverseAspectRatio() -> CoreFoundation.CGFloat
}
@objc(BABBottomSheetPresentable) public protocol BottomSheetPresentable {
  @objc func allowsDragToDismiss() -> Swift.Bool
  @objc func allowsTapToDismiss() -> Swift.Bool
  @objc(shouldRespondToPanGestureRecognizer:) func shouldRespond(to panGestureRecognizer: UIKit.UIPanGestureRecognizer) -> Swift.Bool
  @objc func portraitHeightRatio() -> CoreFoundation.CGFloat
  @objc func landscapeHeightRatio() -> CoreFoundation.CGFloat
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var bab_parentViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public func bab_allSubviews<T>(ofType type: T.Type) -> [T] where T : UIKit.UIView
}
@_inheritsConvenienceInitializers @objc public class BABString : ObjectiveC.NSObject {
  @objc public static func localizedString(forKey key: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVBuzzAdNative : ObjectiveC.NSObject {
  @objc(nativeWithUnitId:) public static func native(with unitId: Swift.String) -> BuzzAdBenefitSDK.BZVBuzzAdNative
  @objc(initWithUnitId:) convenience public init(unitId: Swift.String)
  @objc(initWithUnitId:autoResetCursor:) convenience public init(unitId: Swift.String, autoResetCursor: Swift.Bool)
  @objc(loadAdWithAdRequest:onSuccess:onFailure:) public func loadAd(with adRequest: BuzzAdBenefitSDK.BZVNativeAdRequest, onSuccess: @escaping (_ nativeAd: BuzzAdBenefitSDK.BZVNativeAd) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc(loadAdsWithAdsRequest:onSuccess:onFailure:) public func loadAds(with adsRequest: BuzzAdBenefitSDK.BZVNativeAdsRequest, onSuccess: @escaping (_ nativeAd: [BuzzAdBenefitSDK.BZVNativeAd]) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc public func loadAds(with adsRequest: BuzzAdBenefitSDK.BZVNativeAdsRequest, requestTarget: Swift.String, onSuccess: @escaping (_ nativeAd: [BuzzAdBenefitSDK.BZVNativeAd]) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc public func loadAvailableRewards(with adsRequest: BuzzAdBenefitSDK.BZVNativeAdsRequest, onSuccess: @escaping (_ availableReward: Swift.Int) -> Swift.Void, onFailure: @escaping (_ error: Foundation.NSError) -> Swift.Void)
  @objc public func resetCursor()
  @objc deinit
}
public struct Shadow {
  public init(color: CoreGraphics.CGColor, offset: CoreFoundation.CGSize, opacity: Swift.Float, radius: CoreFoundation.CGFloat)
}
@_hasMissingDesignatedInitializers @objc(BABBaseBIEvent) public class BaseBIEvent : ObjectiveC.NSObject, BuzzAdBenefitSDK.BIEvent {
  @objc final public let type: Swift.String
  @objc final public let name: Swift.String
  @objc final public let attributes: [Swift.String : Swift.String]
  @objc deinit
}
public enum ImageError : Swift.Error {
  case invalidUrl
  case downloadFailure
  public static func == (a: BuzzAdBenefitSDK.ImageError, b: BuzzAdBenefitSDK.ImageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ObjectStorageError : Swift.Error {
  case encodingFailed
  case decodingFailed
  case objectNotFound
  public static func == (a: BuzzAdBenefitSDK.ObjectStorageError, b: BuzzAdBenefitSDK.ObjectStorageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.UserDefaults {
  public func bab_setObject<Object>(_ object: Object, forKey key: Swift.String) throws where Object : Swift.Encodable
  public func bab_getObject<Object>(forKey: Swift.String, castTo type: Object.Type) throws -> Object where Object : Swift.Decodable
}
extension CoreGraphics.CGColor {
  public static let bab_opaque: CoreGraphics.CGColor
  public static let bab_transparent: CoreGraphics.CGColor
}
public struct AlertConfig {
  public init(image: UIKit.UIImage?, titleText: Swift.String, bodyText: Swift.String, confirmText: Swift.String, confirmTextColor: UIKit.UIColor, cancelText: Swift.String, cancelTextColor: UIKit.UIColor, onConfirm: @escaping () -> Swift.Void = {}, onCancel: @escaping () -> Swift.Void = {})
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAdsRequest : ObjectiveC.NSObject {
  @objc deinit
}
extension Swift.String {
  public static func bab_feedSuiteName(for unitId: Swift.String) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BZVNativeAd2View : BuzzAdBenefitSDK.BZVNativeAdView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Config : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum RemoteConfigError : Swift.Error {
  case invalidRequest
  case configNotFound
  case invalidResponse
  public static func == (a: BuzzAdBenefitSDK.RemoteConfigError, b: BuzzAdBenefitSDK.RemoteConfigError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ColorParser {
  public init()
  public func parse(rawHex: Swift.String) throws -> UIKit.UIColor
}
public protocol UnitManager {
  func fetchAndCacheSettings(with unitId: Swift.String) -> BuzzRxSwift.Observable<BuzzAdBenefitSDK.UnitSettings>
  func getCachedSettings(with unitId: Swift.String) -> BuzzAdBenefitSDK.UnitSettings
}
extension BuzzAdBenefitSDK.BaseBIEvent {
  @objc public static func initSDK() -> BuzzAdBenefitSDK.BIEvent
  @objc public static func enterForeground() -> BuzzAdBenefitSDK.BIEvent
  @objc public static func showPrivacyPolicy() -> BuzzAdBenefitSDK.BIEvent
  @objc public static func agreePrivacyPolicy() -> BuzzAdBenefitSDK.BIEvent
  @objc public static func disagreePrivacyPolicy() -> BuzzAdBenefitSDK.BIEvent
  @objc public static func enterPrivacyPolicyWebPage() -> BuzzAdBenefitSDK.BIEvent
  @objc public static func clickWidget() -> BuzzAdBenefitSDK.BIEvent
}
public protocol WidgetTutorialViewControllerDelegate : AnyObject {
  func widgetTutorialViewControllerDidCancel(_ viewController: UIKit.UIViewController)
  func widgetTutorialViewControllerDidConfirm(_ viewController: UIKit.UIViewController)
}
@objc public enum BZVRewardResult : Swift.Int {
  case success = 0
  case alreadyParticipated
  case browserNotLaunched
  case tooShortToParticipate
  case networkError
  case clientError
  case serverError
  case timeout
  case missingReward
  case unknownError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BuzzAdBenefitSDK.TrackingAuthorizer {
  public func requestAuthorization() -> BuzzRxSwift.Observable<BuzzAdBenefitSDK.TrackingAuthorizationStatus>
}
@objc(BABBaseRewardError) public enum BaseRewardError : Swift.Int, Swift.Error {
  case resourceNotFound
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class BZVDefaultCtaView : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) final public func setCtaBackgroundColor(_ ctaBackgroundColor: BuzzAdBenefitSDK.BZVControlStateResource<UIKit.UIColor>)
  @objc @_Concurrency.MainActor(unsafe) final public func setCtaTextColor(_ ctaTextColor: BuzzAdBenefitSDK.BZVControlStateResource<UIKit.UIColor>)
  @objc @_Concurrency.MainActor(unsafe) final public func setRewardImage(_ rewardImage: UIKit.UIImage)
  @objc @_Concurrency.MainActor(unsafe) final public func setParticipatedImage(_ participatedImage: UIKit.UIImage)
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVDefaultCtaView : BuzzAdBenefitSDK.BZVCtaViewProtocol {
  @_Concurrency.MainActor(unsafe) @objc final public func renderRewardNotAvailableViewState(withCtaText ctaText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc final public func renderRewardAvailableViewState(withCtaText ctaText: Swift.String, reward: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc final public func renderParticipatingViewState(withCtaText ctaText: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc final public func renderParticipatedViewState(withCtaText ctaText: Swift.String)
}
public typealias BZVBuzzAdInterstitialBuilderBlock = (BuzzAdBenefitSDK.BZVBuzzAdInterstitialBuilder) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVBuzzAdInterstitialBuilder : ObjectiveC.NSObject {
  @objc public var unitId: Swift.String?
  @objc public var type: BuzzAdBenefitSDK.BZVBuzzAdInterstitialType
  @objc public var theme: BuzzAdBenefitSDK.BZVBuzzAdInterstitialTheme?
  @objc public var inquiryButtonHidden: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVBuzzAdInterstitial {
  @objc(interstitialWithBlock:) public static func interstitial(with block: (BuzzAdBenefitSDK.BZVBuzzAdInterstitialBuilder) -> Swift.Void) -> BuzzAdBenefitSDK.BZVBuzzAdInterstitial
  @objc convenience dynamic public init(block: (BuzzAdBenefitSDK.BZVBuzzAdInterstitialBuilder) -> Swift.Void)
}
public enum DailyRewardAPIError : Swift.Error {
  case networkRequestFailure
  case invalidHttpStatusCode
  public static func == (a: BuzzAdBenefitSDK.DailyRewardAPIError, b: BuzzAdBenefitSDK.DailyRewardAPIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIViewController : BuzzAdBenefitSDK.UserInterfaceStyleOverridable {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bab_overrideUserInterfaceStyle()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func bab_needsUpdateCGColors(previousTraitCollection: UIKit.UITraitCollection?) -> Swift.Bool
}
@objc(BABTrackingAuthorizationStatus) public enum TrackingAuthorizationStatus : Swift.Int {
  case authorized
  case denied
  case notDetermined
  case restricted
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BABUserPreferencesMapper : ObjectiveC.NSObject {
  @objc public func transform(userPreferences: BuzzAdBenefitSDK.BZVUserPreferences) -> BuzzAdBenefitSDK.BABUserPreference
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIColor {
  @objc public static func bab_dynamicColor(light: UIKit.UIColor, dark: UIKit.UIColor) -> UIKit.UIColor
}
public struct DailyRewardPageDTO : Swift.Decodable {
  public let pageType: Swift.String
  public let pageId: Swift.String
  public let pageDetail: BuzzAdBenefitSDK.DailyRewardDTO
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class BZVNativeAd2Pool : ObjectiveC.NSObject {
  @objc public init(unitId: Swift.String)
  @objc final public func loadAds(count: Swift.Int = 1, completionHandler: @escaping (Swift.Int) -> Swift.Void, errorHandler: @escaping (Foundation.NSError) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class BZVNativeAd2 : ObjectiveC.NSObject {
  @objc final public var title: Swift.String {
    @objc get
  }
  @objc final public var body: Swift.String {
    @objc get
  }
  @objc final public var reward: Swift.Int {
    @objc get
  }
  @objc final public var revenueType: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc(BABDeepLinkDestination) public enum DeepLinkDestination : Swift.Int, Swift.RawRepresentable {
  case feed
  public typealias RawValue = Swift.String
  public var rawValue: BuzzAdBenefitSDK.DeepLinkDestination.RawValue {
    get
  }
  public init?(rawValue: BuzzAdBenefitSDK.DeepLinkDestination.RawValue)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAdViewBinder : ObjectiveC.NSObject {
  @objc(bindWithNativeAd:) public func bind(with nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVNativeAdViewBinder : BuzzAdBenefitSDK.BZVNativeAdEventDelegate {
  @objc dynamic public func didImpress(_ nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
  @objc dynamic public func didClick(_ nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
  @objc dynamic public func didRequestReward(for ad: BuzzAdBenefitSDK.BZVNativeAd)
  @objc dynamic public func didReward(for Ad: BuzzAdBenefitSDK.BZVNativeAd, with result: BuzzAdBenefitSDK.BZVRewardResult)
  @objc dynamic public func didParticipateAd(_ nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
}
extension BuzzAdBenefitSDK.Color {
  @objc public static var gray_lightest: UIKit.UIColor {
    @objc get
  }
  @objc public static var gray_light: UIKit.UIColor {
    @objc get
  }
  @objc public static var gray_darkest: UIKit.UIColor {
    @objc get
  }
  @objc public static var black005: UIKit.UIColor {
    @objc get
  }
  @objc public static var black012: UIKit.UIColor {
    @objc get
  }
  @objc public static var black015: UIKit.UIColor {
    @objc get
  }
  @objc public static var black033: UIKit.UIColor {
    @objc get
  }
  @objc public static var black040: UIKit.UIColor {
    @objc get
  }
  @objc public static var black055: UIKit.UIColor {
    @objc get
  }
  @objc public static var black070: UIKit.UIColor {
    @objc get
  }
  @objc public static var black087: UIKit.UIColor {
    @objc get
  }
  @objc public static var black100: UIKit.UIColor {
    @objc get
  }
  @objc public static var white005: UIKit.UIColor {
    @objc get
  }
  @objc public static var white015: UIKit.UIColor {
    @objc get
  }
  @objc public static var white033: UIKit.UIColor {
    @objc get
  }
  @objc public static var white040: UIKit.UIColor {
    @objc get
  }
  @objc public static var white070: UIKit.UIColor {
    @objc get
  }
  @objc public static var white100: UIKit.UIColor {
    @objc get
  }
}
@objc(BABDeepLink) public class DeepLink : ObjectiveC.NSObject {
  @objc final public let source: BuzzAdBenefitSDK.DeepLinkSource
  @objc final public let destination: BuzzAdBenefitSDK.DeepLinkDestination
  @objc public init(source: BuzzAdBenefitSDK.DeepLinkSource, destination: BuzzAdBenefitSDK.DeepLinkDestination)
  public func toURL() throws -> Foundation.URL
  @objc deinit
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public func bab_isScrolledToLeft() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func bab_isScrolledToRight() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func bab_isScrolledToTop() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func bab_isScrolledToBottom() -> Swift.Bool
}
@objc(BABBIEvent) public protocol BIEvent {
  @objc var type: Swift.String { get }
  @objc var name: Swift.String { get }
  @objc var attributes: [Swift.String : Swift.String] { get }
}
public typealias BZVNativeAdsRequestBuilderBlock = (BuzzAdBenefitSDK.BZVNativeAdsRequestBuilder) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVNativeAdsRequestBuilder : ObjectiveC.NSObject {
  @objc public var adCount: Foundation.NSNumber?
  @objc public var revenueTypes: [Swift.String]?
  @objc public var categories: [Swift.String]?
  @objc public var cpsCategories: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVNativeAdsRequest {
  @objc(requestWithBlock:) public static func request(block: (BuzzAdBenefitSDK.BZVNativeAdsRequestBuilder) -> Swift.Void) -> BuzzAdBenefitSDK.BZVNativeAdsRequest
  @objc convenience dynamic public init(block: (BuzzAdBenefitSDK.BZVNativeAdsRequestBuilder) -> Swift.Void)
}
extension UIKit.UIImage {
  @objc dynamic public func bab_tint(_ color: UIKit.UIColor) -> UIKit.UIImage
}
public enum ColorError : Swift.Error {
  case invalidRawHex
  public static func == (a: BuzzAdBenefitSDK.ColorError, b: BuzzAdBenefitSDK.ColorError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Response : Swift.Equatable {
  public let data: Foundation.Data
  public let httpResponse: Foundation.HTTPURLResponse
  public static func == (a: BuzzAdBenefitSDK.Response, b: BuzzAdBenefitSDK.Response) -> Swift.Bool
}
public struct DailyRewardDTO : Swift.Decodable {
  public let isAttendedToday: Swift.Bool
  public let entryDescription: Swift.String
  public let tooltipMessage: Swift.String
  public let rewardCallback: Swift.String
  public let notice: [Swift.String]
  public let attendedDays: Swift.Int
  public let maxAttendableDays: Swift.Int
  public let rewardPointAmount: Swift.Int
  public let toastMessage: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var bab_isVisible: Swift.Bool {
    @objc get
  }
}
public enum NetworkError : Swift.Error {
  case buildURLRequestFailed
  case invalidHttpStatusCode
  case nonHttpResponse
  case parseStringFailed
  public static func == (a: BuzzAdBenefitSDK.NetworkError, b: BuzzAdBenefitSDK.NetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(BABSessionDTO) public class SessionDTO : ObjectiveC.NSObject {
  @objc final public let deviceId: Swift.String
  @objc final public let isNewDevice: Swift.Bool
  @objc final public let key: Swift.String
  @objc public func toDictionary() -> [Swift.String : Swift.String]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BABImage : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BABLogger) public class Logger : ObjectiveC.NSObject {
  @objc public static func enable(subsystem: Swift.String)
  @objc public static func log(_ message: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.KeyedDecodingContainer {
  public func bab_decode(_ type: [Swift.String : Any].Type, forKey key: K) throws -> [Swift.String : Any]
  public func bab_decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: K) throws -> [Swift.String : Any]?
  public func bab_decode(_ type: [Any].Type, forKey key: K) throws -> [Any]
  public func bab_decodeIfPresent(_ type: [Any].Type, forKey key: K) throws -> [Any]?
}
@_inheritsConvenienceInitializers @objc(BABColor) @objcMembers public class Color : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public struct WidgetTutorialViewConfig {
  public init(buttonBackgroundColor: UIKit.UIColor, buttonTextColor: UIKit.UIColor)
}
@_inheritsConvenienceInitializers @objc(BABServer) final public class Server : ObjectiveC.NSObject {
  @objc(BABServerEnvironment) public enum Environment : Swift.Int {
    case prod
    case prodmini
    case dev
    case staging
    case stagingQA
    case stagingQA2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(BABService) public enum Service : Swift.Int {
    case ad
    case auth
    case insight
    case screen
    case buzzbooster
    case base
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public func setEnvironment(to environment: BuzzAdBenefitSDK.Server.Environment)
  @objc final public func getBaseUrl(of service: BuzzAdBenefitSDK.Server.Service) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public enum WidgetKind : Swift.String {
  case totalReward
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension BuzzAdBenefitSDK.Color {
  @objc public static var status_best: UIKit.UIColor {
    @objc get
  }
  @objc public static var status_success: UIKit.UIColor {
    @objc get
  }
  @objc public static var status_warning: UIKit.UIColor {
    @objc get
  }
  @objc public static var status_error: UIKit.UIColor {
    @objc get
  }
  @objc public static var status_alert: UIKit.UIColor {
    @objc get
  }
}
extension BuzzAdBenefitSDK.Color {
  @objc public static var text_base: UIKit.UIColor {
    @objc get
  }
  @objc public static var text_emphasis: UIKit.UIColor {
    @objc get
  }
  @objc public static var text_description: UIKit.UIColor {
    @objc get
  }
  @objc public static var text_assistive: UIKit.UIColor {
    @objc get
  }
  @objc public static var text_disabled: UIKit.UIColor {
    @objc get
  }
  @objc public static var text_overlay: UIKit.UIColor {
    @objc get
  }
  @objc public static var text_deem: UIKit.UIColor {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BABBaseRewardManager) final public class BaseRewardManager : ObjectiveC.NSObject {
  @objc convenience override dynamic public init()
  @objc final public func getBaseRewardAmount(with unitId: Swift.String, eventType: BuzzAdBenefitSDK.BaseRewardEventType, resourceType: BuzzAdBenefitSDK.BaseRewardResourceType, onSuccess: @escaping (Swift.Int) -> Swift.Void, onFailure: @escaping (Swift.Error) -> Swift.Void)
  @objc final public func claimBaseReward(with unitId: Swift.String, eventType: BuzzAdBenefitSDK.BaseRewardEventType, resourceType: BuzzAdBenefitSDK.BaseRewardResourceType, onSuccess: @escaping (Swift.Int) -> Swift.Void, onFailure: @escaping (Swift.Error) -> Swift.Void)
  @objc deinit
}
@objc public enum BuzzMediaViewAspect : Swift.Int {
  case fit
  case fill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class BuzzMediaView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var videoPlayer: BuzzAdBenefitSDK.BuzzVideoPlayer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var fillMode: BuzzAdBenefitSDK.BuzzMediaViewAspect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func loadImage(atUrl url: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public func loadVideo(atUrl url: Foundation.URL, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func loadVideo(withBuzzPlayer player: BuzzAdBenefitSDK.BuzzPlayerProtocol, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public func loadVideo(atVastTag vastTag: Swift.String, autoPlay: Swift.Bool, thumbnailImageUrl: Foundation.URL, fromSecond: Foundation.TimeInterval, mute: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func didEnterFullscreen()
  @objc @_Concurrency.MainActor(unsafe) public func didExitFullscreen()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @objc deinit
}
extension BuzzAdBenefitSDK.BuzzMediaView : BuzzAdBenefitSDK.BABImpressionTrackableView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func shouldTrackImpression() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewDidImpressed()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewBecomeVisible()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewBecomeInvisible()
}
public enum ConfigKey : Swift.String {
  case appPrivacyPolicyUIEnabled
  case nativeAutoRefreshEnabled
  case feedDailyRewardEnabled
  case dailyRewardInterstitialUnitId
  case appTrackingTransparencyEnabled
  case buzzBenefitHeaderEnabled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BABSDKCore) final public class SDKCore : ObjectiveC.NSObject {
  @objc public static let shared: BuzzAdBenefitSDK.SDKCore
  @objc final public var authManager: BuzzAdBenefitSDK.AuthManager {
    @objc get
    @objc set
  }
  @objc final public var biEventTracker: BuzzAdBenefitSDK.BIEventTracker {
    @objc get
    @objc set
  }
  final public var dailyRewardService: BuzzAdBenefitSDK.DailyRewardService {
    get
    set
  }
  @objc final public let baseRewardManager: BuzzAdBenefitSDK.BaseRewardManager
  @objc final public let server: BuzzAdBenefitSDK.Server
  @objc final public let trackingAuthorizer: BuzzAdBenefitSDK.TrackingAuthorizer
  final public let unitManager: BuzzAdBenefitSDK.UnitManager
  final public let widgetInstallChecker: BuzzAdBenefitSDK.WidgetInstallChecker
  @objc final public var userInterfaceStyle: BuzzAdBenefitSDK.BZVUserInterfaceStyle
  @objc deinit
}
extension BuzzAdBenefitSDK.Color {
  @objc public static var primary_dark: UIKit.UIColor {
    @objc get
  }
  @objc public static var primary_base: UIKit.UIColor {
    @objc get
  }
  @objc public static var primary_light: UIKit.UIColor {
    @objc get
  }
  @objc public static var primary_lighter: UIKit.UIColor {
    @objc get
  }
  @objc public static var primary_lightest: UIKit.UIColor {
    @objc get
  }
}
@objc @objcMembers public class BZVWebInterface : ObjectiveC.NSObject {
  @objc public init(webView: WebKit.WKWebView?)
  @objc(handleScriptMessage:) public func handle(_ scriptMessage: WebKit.WKScriptMessage)
  @objc deinit
}
extension BuzzAdBenefitSDK.Color {
  @objc public static var background_base: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_emphasis: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_separator: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_elevation: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_modal: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_overlay_drastic: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_overlay_ripple: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_overlay_light: UIKit.UIColor {
    @objc get
  }
  @objc public static var background_overlay_lightest: UIKit.UIColor {
    @objc get
  }
}
public struct ConfigList {
}
extension BuzzAdBenefitSDK.ConfigList : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc(BABAuthManagerSwift) public protocol AuthManager {
  @objc func isLoggedIn() -> Swift.Bool
  @objc func loadBuzzUUIDString() -> Swift.String
  @objc func loadSession() -> BuzzAdBenefitSDK.SessionDTO?
  @objc func loadToken() -> Swift.String?
  @objc func loadUserProfile() -> BuzzAdBenefitSDK.UserProfileDTO?
  @objc func login(with userProfile: BuzzAdBenefitSDK.UserProfileDTO, onSuccess: @escaping (BuzzAdBenefitSDK.SessionDTO) -> Swift.Void, onFailure: @escaping (Swift.Error) -> Swift.Void)
  @objc func logout()
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func actionWhenViewControllerVisible(timeInterval: Dispatch.DispatchTimeInterval, action: @escaping (() -> Swift.Void), disposeBag: BuzzRxSwift.DisposeBag)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func bab_presentBottomSheet(_ viewControllerToPresent: UIKit.UIViewController, completion: (() -> Swift.Void)? = nil)
}
@objc(BABTrackingAuthorizer) public protocol TrackingAuthorizer {
  @objc func canGuideAuthorization() -> Swift.Bool
  @objc func canRequestAuthorization() -> Swift.Bool
  @objc func loadAuthorizationGuideURL() -> Foundation.URL
  @objc func requestAuthorization(onSuccess: @escaping (BuzzAdBenefitSDK.TrackingAuthorizationStatus) -> Swift.Void, onFailure: @escaping (Swift.Error) -> Swift.Void)
}
extension BuzzAdBenefitSDK.Color {
  @objc public static var dimmer_base: UIKit.UIColor {
    @objc get
  }
  @objc public static var dimmer_drastic: UIKit.UIColor {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAdProduct : ObjectiveC.NSObject {
  @objc final public let price: Swift.Float
  @objc final public let discountedPrice: Swift.Float
  @objc final public let category: Swift.String
  @objc final public let isSpotlighted: Swift.Bool
  @objc public static func product(price: Swift.Float, discountedPrice: Swift.Float, category: Swift.String, isSpotlighted: Swift.Bool) -> BuzzAdBenefitSDK.BZVNativeAdProduct
  @objc deinit
}
public typealias BZVUserPreferencesBuilderBlock = (BuzzAdBenefitSDK.BZVUserPreferencesBuilder) -> Swift.Void
@objc @_inheritsConvenienceInitializers @objcMembers public class BZVUserPreferencesBuilder : ObjectiveC.NSObject {
  @objc public var autoPlayType: BuzzAdBenefitSDK.BZVVideoAutoPlayType
  @objc override dynamic public init()
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVUserPreferences {
  @objc(userPreferencesWithBlock:) public static func userPreferences(with block: (BuzzAdBenefitSDK.BZVUserPreferencesBuilder) -> Swift.Void) -> BuzzAdBenefitSDK.BZVUserPreferences
  @objc convenience dynamic public init(block: (BuzzAdBenefitSDK.BZVUserPreferencesBuilder) -> Swift.Void)
}
public struct UnitSettings : Swift.Decodable, Swift.Equatable {
  public let feedRatio: BuzzAdBenefitSDK.FeedRatio
  public init(feedRatio: BuzzAdBenefitSDK.FeedRatio)
  public static func == (a: BuzzAdBenefitSDK.UnitSettings, b: BuzzAdBenefitSDK.UnitSettings) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct FeedRatio : Swift.Decodable, Swift.Equatable {
  public let ad: Swift.Int
  public let content: Swift.Int
  public init(ad: Swift.Int, content: Swift.Int)
  public static func == (a: BuzzAdBenefitSDK.FeedRatio, b: BuzzAdBenefitSDK.FeedRatio) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class BABNativeAdMapper : ObjectiveC.NSObject {
  @objc(transformFromBABAd:) public func transform(ad: BuzzAdBenefitSDK.BABAd) -> BuzzAdBenefitSDK.BZVNativeAd
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol BZVNativeAdEventDelegate : ObjectiveC.NSObjectProtocol {
  @objc(didImpressAd:) func didImpress(_ nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
  @objc(didClickAd:) func didClick(_ nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
  @objc(didRequestRewardForAd:) func didRequestReward(for ad: BuzzAdBenefitSDK.BZVNativeAd)
  @objc(didRewardForAd:withResult:) func didReward(for Ad: BuzzAdBenefitSDK.BZVNativeAd, with result: BuzzAdBenefitSDK.BZVRewardResult)
  @objc func didParticipateAd(_ nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BZVNativeAd : ObjectiveC.NSObject {
  @objc weak public var delegate: BuzzAdBenefitSDK.BZVNativeAdEventDelegate?
  @objc weak public var internalDelegate: BuzzAdBenefitSDK.BZVNativeAdEventDelegate?
  @objc final public let ad: BuzzAdBenefitSDK.BABAd
  @objc(nativeAdWithBABAd:) public static func nativeAd(ad: BuzzAdBenefitSDK.BABAd) -> BuzzAdBenefitSDK.BZVNativeAd
  @objc public var Id: Swift.String {
    @objc get
  }
  @objc public var title: Swift.String {
    @objc get
  }
  @objc public var body: Swift.String {
    @objc get
  }
  @objc public var iconURL: Swift.String {
    @objc get
  }
  @objc public var callToAction: Swift.String {
    @objc get
  }
  @objc public var revenueType: BuzzAdBenefitSDK.BZVRevenueType {
    @objc get
  }
  @objc public var product: BuzzAdBenefitSDK.BZVNativeAdProduct {
    @objc get
  }
  @objc public var totalReward: Swift.Double {
    @objc get
  }
  @objc public var availableReward: Swift.Double {
    @objc get
  }
  @objc public var isCps: Swift.Bool {
    @objc get
  }
  @objc public var adnetworkCampaignType: Swift.Int {
    @objc get
  }
  @objc public var isActionType: Swift.Bool {
    @objc get
  }
  @objc public var isClicked: Swift.Bool {
    @objc get
  }
  @objc public var isDeepLink: Swift.Bool {
    @objc get
  }
  @objc public var isParticipated: Swift.Bool {
    @objc get
  }
  @objc public var isRewardReceived: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension UIKit.UIColor {
  @objc dynamic public func bab_isEqual(_ other: UIKit.UIColor) -> Swift.Bool
}
@objc @objcMembers public class BABCtaPresenter : ObjectiveC.NSObject {
  @objc public init(ctaView: BuzzAdBenefitSDK.BZVCtaViewProtocol)
  @objc(bindWithNativeAd:) public func bind(nativeAd: BuzzAdBenefitSDK.BZVNativeAd)
  @objc deinit
}
extension BuzzAdBenefitSDK.BZVNativeAd2ViewBinder {
  final public class Builder {
    public init(unitId: Swift.String)
    final public func nativeAd2View(_ nativeAd2View: BuzzAdBenefitSDK.BZVNativeAd2View) -> Self
    final public func mediaView(_ mediaView: BuzzAdBenefitSDK.BZVMediaView) -> Self
    final public func iconImageView(_ iconImageView: UIKit.UIImageView) -> Self
    final public func titleLabel(_ titleLabel: UIKit.UILabel) -> Self
    final public func descriptionLabel(_ descriptionLabel: UIKit.UILabel) -> Self
    final public func ctaView(_ ctaView: UIKit.UIView & BuzzAdBenefitSDK.BZVCtaViewProtocol) -> Self
    final public func setClickableViews(_ clickableViews: [UIKit.UIView]) -> Self
    final public func build() -> BuzzAdBenefitSDK.BZVNativeAd2ViewBinder
    @objc deinit
  }
}
extension BuzzAdBenefitSDK.BZVNativeAd2ViewBinder {
  public typealias BZVNativeAd2ViewBinderBlock = (BuzzAdBenefitSDK.BZVNativeAd2ViewBinderBuilder) -> Swift.Void
  @objc(viewBinderWithBlock:) public static func viewBinder(with block: (BuzzAdBenefitSDK.BZVNativeAd2ViewBinderBuilder) -> Swift.Void) -> BuzzAdBenefitSDK.BZVNativeAd2ViewBinder
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class BZVNativeAd2ViewBinderBuilder : ObjectiveC.NSObject {
  @objc final public var nativeAd2View: BuzzAdBenefitSDK.BZVNativeAd2View?
  @objc final public var mediaView: BuzzAdBenefitSDK.BZVMediaView?
  @objc final public var iconImageView: UIKit.UIImageView?
  @objc final public var titleLabel: UIKit.UILabel?
  @objc final public var descriptionLabel: UIKit.UILabel?
  @objc final public var ctaView: (UIKit.UIView & BuzzAdBenefitSDK.BZVCtaViewProtocol)?
  @objc final public var clickableViews: [UIKit.UIView]?
  @objc final public var unitId: Swift.String?
  @objc deinit
}
extension BuzzAdBenefitSDK.BaseRewardEventType : Swift.Equatable {}
extension BuzzAdBenefitSDK.BaseRewardEventType : Swift.Hashable {}
extension BuzzAdBenefitSDK.BaseRewardEventType : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.UserGenderDTO : Swift.Equatable {}
extension BuzzAdBenefitSDK.UserGenderDTO : Swift.Hashable {}
extension BuzzAdBenefitSDK.UserGenderDTO : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.DeepLinkSource : Swift.Equatable {}
extension BuzzAdBenefitSDK.DeepLinkSource : Swift.Hashable {}
extension BuzzAdBenefitSDK.BaseRewardResourceType : Swift.Equatable {}
extension BuzzAdBenefitSDK.BaseRewardResourceType : Swift.Hashable {}
extension BuzzAdBenefitSDK.BaseRewardResourceType : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.URLRequestBuilder.ContentType : Swift.Equatable {}
extension BuzzAdBenefitSDK.URLRequestBuilder.ContentType : Swift.Hashable {}
extension BuzzAdBenefitSDK.URLRequestBuilder.ContentType : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.URLRequestBuilder.Method : Swift.Equatable {}
extension BuzzAdBenefitSDK.URLRequestBuilder.Method : Swift.Hashable {}
extension BuzzAdBenefitSDK.URLRequestBuilder.Method : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.BZVBuzzAdInterstitialType : Swift.Equatable {}
extension BuzzAdBenefitSDK.BZVBuzzAdInterstitialType : Swift.Hashable {}
extension BuzzAdBenefitSDK.BZVBuzzAdInterstitialType : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.ImageError : Swift.Equatable {}
extension BuzzAdBenefitSDK.ImageError : Swift.Hashable {}
extension BuzzAdBenefitSDK.ObjectStorageError : Swift.Equatable {}
extension BuzzAdBenefitSDK.ObjectStorageError : Swift.Hashable {}
extension BuzzAdBenefitSDK.RemoteConfigError : Swift.Equatable {}
extension BuzzAdBenefitSDK.RemoteConfigError : Swift.Hashable {}
extension BuzzAdBenefitSDK.BZVRewardResult : Swift.Equatable {}
extension BuzzAdBenefitSDK.BZVRewardResult : Swift.Hashable {}
extension BuzzAdBenefitSDK.BZVRewardResult : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.BaseRewardError : Swift.Equatable {}
extension BuzzAdBenefitSDK.BaseRewardError : Swift.Hashable {}
extension BuzzAdBenefitSDK.BaseRewardError : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.DailyRewardAPIError : Swift.Equatable {}
extension BuzzAdBenefitSDK.DailyRewardAPIError : Swift.Hashable {}
extension BuzzAdBenefitSDK.TrackingAuthorizationStatus : Swift.Equatable {}
extension BuzzAdBenefitSDK.TrackingAuthorizationStatus : Swift.Hashable {}
extension BuzzAdBenefitSDK.TrackingAuthorizationStatus : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.DeepLinkDestination : Swift.Equatable {}
extension BuzzAdBenefitSDK.DeepLinkDestination : Swift.Hashable {}
extension BuzzAdBenefitSDK.ColorError : Swift.Equatable {}
extension BuzzAdBenefitSDK.ColorError : Swift.Hashable {}
extension BuzzAdBenefitSDK.NetworkError : Swift.Equatable {}
extension BuzzAdBenefitSDK.NetworkError : Swift.Hashable {}
extension BuzzAdBenefitSDK.Server.Environment : Swift.Equatable {}
extension BuzzAdBenefitSDK.Server.Environment : Swift.Hashable {}
extension BuzzAdBenefitSDK.Server.Environment : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.Server.Service : Swift.Equatable {}
extension BuzzAdBenefitSDK.Server.Service : Swift.Hashable {}
extension BuzzAdBenefitSDK.Server.Service : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.WidgetKind : Swift.Equatable {}
extension BuzzAdBenefitSDK.WidgetKind : Swift.Hashable {}
extension BuzzAdBenefitSDK.WidgetKind : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.BuzzMediaViewAspect : Swift.Equatable {}
extension BuzzAdBenefitSDK.BuzzMediaViewAspect : Swift.Hashable {}
extension BuzzAdBenefitSDK.BuzzMediaViewAspect : Swift.RawRepresentable {}
extension BuzzAdBenefitSDK.ConfigKey : Swift.Equatable {}
extension BuzzAdBenefitSDK.ConfigKey : Swift.Hashable {}
extension BuzzAdBenefitSDK.ConfigKey : Swift.RawRepresentable {}
