// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BuzzBoosterSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import BuzzBoosterSDK
import BuzzRxSwift
import CoreData
import CryptoKit
import Foundation
import ImageIO
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BSTUIViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum BSTCampaignType : Swift.Int {
  case attendance
  case referral
  case optInMarketing
  case scratchLottery
  case roulette
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol BSTUserEventDelegate {
  @objc func userEventDidOccur(_ userEvent: BuzzBoosterSDK.BSTUserEvent)
}
extension BuzzBoosterSDK.BBSEventLocalDto {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BuzzBoosterSDK.BBSEventLocalDto>
  @objc @NSManaged dynamic public var eventId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventTime: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventValues: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(BIEventLocalDTO) public class BIEventLocalDTO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension BuzzRxSwift.ObservableType {
  public func bind<Observer>(to observers: Observer...) -> BuzzRxSwift.Disposable where Observer : BuzzRxSwift.ObserverType, Self.Element == Observer.Element
  public func bind<Observer>(to observers: Observer...) -> BuzzRxSwift.Disposable where Observer : BuzzRxSwift.ObserverType, Observer.Element == Self.Element?
  public func bind<Result>(to binder: (Self) -> Result) -> Result
  public func bind<R1, R2>(to binder: (Self) -> (R1) -> R2, curriedArgument: R1) -> R2
  public func bind<Object>(with object: Object, onNext: @escaping (Object, Self.Element) -> Swift.Void) -> BuzzRxSwift.Disposable where Object : AnyObject
  public func bind(onNext: @escaping (Self.Element) -> Swift.Void) -> BuzzRxSwift.Disposable
  public func catchAndNextError(with elementFactory: @escaping (Swift.Error) -> Self.Element) -> BuzzRxSwift.Observable<Self.Element>
}
@_inheritsConvenienceInitializers @objc(BBSEventLocalDto) public class BBSEventLocalDto : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BSTUserEvent : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let values: [Swift.String : Any]?
  @objc deinit
}
public class LayerPersistentHelper {
  public init(with layer: QuartzCore.CALayer)
  @objc deinit
}
extension BuzzBoosterSDK.BIEventLocalDTO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BuzzBoosterSDK.BIEventLocalDTO>
  @objc @NSManaged dynamic public var eventId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var eventValues: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
}
public typealias BSTUserBuilderBlock = (BuzzBoosterSDK.BSTUserBuilder) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @objcMembers public class BSTUser : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let marketingStatus: BuzzBoosterSDK.BSTMarketingStatus
  @objc final public let properties: [Swift.String : Any]
  @objc public static func user(block: (BuzzBoosterSDK.BSTUserBuilder) -> Swift.Void) -> BuzzBoosterSDK.BSTUser
  @objc public init(block: (BuzzBoosterSDK.BSTUserBuilder) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BSTUserBuilder : ObjectiveC.NSObject {
  @objc public var userId: Swift.String?
  @objc public var marketingStatus: BuzzBoosterSDK.BSTMarketingStatus
  @objc public var properties: [Swift.String : Any]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BuzzBoosterWebKit : ObjectiveC.NSObject {
  @objc public static let eventMapper: BuzzBoosterSDK.BBSEventMapper
  @objc public static let handlerName: Swift.String
  @objc public static let userScriptSource: Swift.String
  @objc public static let userScript: WebKit.WKUserScript
  @objc public static func handle(with viewController: UIKit.UIViewController, message: WebKit.WKScriptMessage) throws
  @objc public static func handle(with viewController: UIKit.UIViewController, messageName: Swift.String, messageBody: Any) throws
  @objc override dynamic public init()
  @objc deinit
}
extension BuzzBoosterSDK.BuzzBooster {
  @objc(initializeWithConfig:) public static func initialize(with config: BuzzBoosterSDK.BSTConfig)
  @objc public static func setUser(_ user: BuzzBoosterSDK.BSTUser?)
  @objc(sendEventWithName:) public static func sendEvent(_ name: Swift.String)
  @objc(sendEventWithName:values:) public static func sendEvent(_ name: Swift.String, values: [Swift.String : Any])
  @objc(showHomeWithViewController:) public static func showHome(with viewController: UIKit.UIViewController)
  @objc public static func getHomeViewController() -> UIKit.UIViewController
  @objc(showCampaignWithId:viewController:) public static func showCampaign(by id: Swift.String, with viewController: UIKit.UIViewController)
  @objc(getCampaignViewControllerWithId:) public static func getCampaignViewController(by id: Swift.String) -> UIKit.UIViewController
  @objc(showCampaignWithType:viewController:) public static func showCampaign(by type: BuzzBoosterSDK.BSTCampaignType, with viewController: UIKit.UIViewController)
  @objc(getCampaignViewControllerWithType:) public static func getCampaignViewController(by type: BuzzBoosterSDK.BSTCampaignType) -> UIKit.UIViewController
  @objc(showNaverPayExchangeWithViewController:) public static func showNaverPayExchange(with viewController: UIKit.UIViewController)
  @objc(showPageWithId:) public static func showPage(by id: Swift.String)
  @objc(showInAppMessageWithViewController:) public static func showInAppMessage(with viewController: UIKit.UIViewController)
  @objc(setAuthorizationToken:) public static func setAuthorizationToken(_ authorizationToken: Swift.String)
  @objc public static func setDeviceToken(_ token: Foundation.Data)
  @objc public static func setPushToken(_ token: Swift.String)
  @objc public static func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc public static func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @objc public static func addUserEventDelegate(_ delegate: BuzzBoosterSDK.BSTUserEventDelegate)
  @objc public static func removeUserEventDelegate(_ delegate: BuzzBoosterSDK.BSTUserEventDelegate)
}
infix operator >>> : AdditionPrecedence
@objc public enum BSTMarketingStatus : Swift.Int {
  case undetermined
  case optIn
  case optOut
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(BSTLogger) public class BSTLogger : ObjectiveC.NSObject {
  @objc public static func enable()
  @objc override dynamic public init()
  @objc deinit
}
public protocol CampaignBannerViewControllerDelegate : AnyObject {
  func campaignBannerViewController(_ campaignBannerViewController: BuzzBoosterSDK.CampaignBannerViewController, didOccur error: Swift.Error)
  func campaignBannerViewControllerLoadingDidStart(_ campaignBannerViewController: BuzzBoosterSDK.CampaignBannerViewController)
  func campaignBannerViewControllerLoadingDidEnd(_ campaignBannerViewController: BuzzBoosterSDK.CampaignBannerViewController)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CampaignBannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: BuzzBoosterSDK.CampaignBannerViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension BuzzBoosterSDK.CampaignBannerViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public typealias BSTConfigBuilderBlock = (BuzzBoosterSDK.BSTConfigBuilder) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @objcMembers public class BSTConfig : ObjectiveC.NSObject {
  @objc final public let appKey: Swift.String
  @objc final public let unitId: Swift.String?
  @objc public static func config(block: (BuzzBoosterSDK.BSTConfigBuilder) -> Swift.Void) -> BuzzBoosterSDK.BSTConfig
  @objc convenience public init(block: (BuzzBoosterSDK.BSTConfigBuilder) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BSTConfigBuilder : ObjectiveC.NSObject {
  @objc public var appKey: Swift.String?
  @objc public var unitId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class BuzzBooster : ObjectiveC.NSObject {
  @objc weak public static var optInMarketingCampaignDelegate: BuzzBoosterSDK.BSTOptInMarketingCampaignDelegate?
  @objc deinit
}
@objc public protocol BSTOptInMarketingCampaignDelegate {
  @objc func onMoveButtonTapped(in viewController: UIKit.UIViewController)
}
extension BuzzBoosterSDK.BSTCampaignType : Swift.Equatable {}
extension BuzzBoosterSDK.BSTCampaignType : Swift.Hashable {}
extension BuzzBoosterSDK.BSTCampaignType : Swift.RawRepresentable {}
extension BuzzBoosterSDK.BSTMarketingStatus : Swift.Equatable {}
extension BuzzBoosterSDK.BSTMarketingStatus : Swift.Hashable {}
extension BuzzBoosterSDK.BSTMarketingStatus : Swift.RawRepresentable {}
