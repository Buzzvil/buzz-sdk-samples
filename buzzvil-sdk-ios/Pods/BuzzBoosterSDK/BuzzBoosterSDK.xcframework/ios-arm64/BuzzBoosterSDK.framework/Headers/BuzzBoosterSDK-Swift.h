#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef BUZZBOOSTERSDK_SWIFT_H
#define BUZZBOOSTERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BuzzBoosterSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("BBSEventLocalDto")
@interface BBSEventLocalDto : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

@interface BBSEventLocalDto (SWIFT_EXTENSION(BuzzBoosterSDK))
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, copy) NSString * _Nullable eventName;
@property (nonatomic, copy) NSString * _Nullable eventTime;
@property (nonatomic, copy) NSString * _Nullable eventValues;
@property (nonatomic, copy) NSString * _Nullable userId;
- (nonnull instancetype)initWithContext:(NSManagedObjectContext * _Nonnull)context SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("BIEventLocalDTO")
@interface BIEventLocalDTO : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

@interface BIEventLocalDTO (SWIFT_EXTENSION(BuzzBoosterSDK))
@property (nonatomic, copy) NSString * _Nullable eventId;
@property (nonatomic, copy) NSString * _Nullable eventName;
@property (nonatomic, copy) NSDate * _Nullable eventTime;
@property (nonatomic, copy) NSString * _Nullable eventValues;
@property (nonatomic, copy) NSString * _Nullable userId;
- (nonnull instancetype)initWithContext:(NSManagedObjectContext * _Nonnull)context SWIFT_UNAVAILABLE;
@end

/// Enum representing different types of campaigns that can be navigated to using the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This enum lists the types of campaigns supported by the SDK for direct navigation. Note that the <code>Stamp campaign</code> is not included in this enum. Hence, if developers wish to navigate to the <code>Stamp Campaign</code>, it’s recommended to use either the <code>showPage(by: id, with: viewController)</code> or <code>showCampaign(by: id, with: viewController)</code> methods.
///   </li>
///   <li>
///     Usage:
///     Use the <code>CampaignType</code> to specify the type of campaign when calling relevant SDK methods.
///     Example:
///     \code
///     // Navigating to a specific campaign type
///     BuzzBoosterSDK.showCampaign(by: .attendance, with: viewController)
///
///     \endcode</li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, BSTCampaignType, open) {
  BSTCampaignTypeAttendance = 0,
  BSTCampaignTypeReferral = 1,
  BSTCampaignTypeOptInMarketing = 2,
  BSTCampaignTypeScratchLottery = 3,
  BSTCampaignTypeRoulette = 4,
};

@class BSTConfigBuilder;

/// Represents the configuration information required for initializing the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     <code>BSTConfig</code> is an object that encapsulates the necessary configuration information for the BuzzBooster SDK. The primary attribute here is the <code>appKey</code> which can be obtained from the SDK’s dashboard.
///   </li>
///   <li>
///     Properties:
///     <ul>
///       <li>
///         <code>appKey</code>: A unique application key obtained from the BuzzBooster dashboard. This key identifies the application instance and is essential for the proper functioning of the SDK.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     To create a <code>BSTConfig</code> instance, you can use the provided builder pattern. This pattern facilitates an easy and error-free way of setting up the configuration.
///     Example:
///     \code
///     let config = BSTConfig { builder in
///       builder.appKey = "YOUR_APP_KEY_FROM_DASHBOARD"
///     }
///     BuzzBooster.initialize(with: config)
///
///     \endcode</li>
/// </ul>
SWIFT_CLASS("_TtC14BuzzBoosterSDK9BSTConfig")
@interface BSTConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull appKey;
@property (nonatomic, readonly, copy) NSString * _Nullable unitId;
+ (BSTConfig * _Nonnull)configWithBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(BSTConfigBuilder * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(BSTConfigBuilder * _Nonnull))block;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14BuzzBoosterSDK16BSTConfigBuilder")
@interface BSTConfigBuilder : NSObject
@property (nonatomic, copy) NSString * _Nullable appKey;
@property (nonatomic, copy) NSString * _Nullable unitId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("BSTLogger")
@interface BSTLogger : NSObject
+ (void)enable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the user’s current consent status for receiving marketing communications within the context of the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     <code>BSTMarketingStatus</code> defines three possible states for a user’s marketing preferences. This helps in determining whether a user has provided consent, declined, or hasn’t yet made a choice regarding receiving marketing communications.
///   </li>
///   <li>
///     Enum Cases:
///     <ul>
///       <li>
///         <code>undetermined</code>: The user has not yet made a decision about receiving marketing communications.
///       </li>
///       <li>
///         <code>optIn</code>: The user has consented to receive marketing communications.
///       </li>
///       <li>
///         <code>optOut</code>: The user has declined to receive marketing communications.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     Use the <code>BSTMarketingStatus</code> to set or retrieve the user’s marketing preference status.
///     Example:
///     \code
///     let user = BSTUser.user { builder in
///       ...
///       builder.marketingStatus = .optIn
///     }
///
///     \endcode</li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, BSTMarketingStatus, open) {
  BSTMarketingStatusUndetermined = 0,
  BSTMarketingStatusOptIn = 1,
  BSTMarketingStatusOptOut = 2,
};

@class UIViewController;

/// Protocol to handle actions related to the BuzzBooster SDK’s opt-in marketing campaign.
/// <ul>
///   <li>
///     Overview:
///     <code>BSTOptInMarketingCampaignDelegate</code> is a protocol that provides a way for delegate objects to respond to specific actions taken within the BuzzBooster SDK’s marketing consent campaign. Particularly, it outlines how to handle when the button at the bottom of the opt-in marketing campaign is tapped.
///   </li>
///   <li>
///     Requirements:
///     Objects wishing to conform to this protocol should implement the <code>onMoveButtonTapped</code> method.
///   </li>
///   <li>
///     Method:
///     <ul>
///       <li>
///         <code>onMoveButtonTapped(in:)</code>: This method is called whenever the move button at the bottom of the opt-in marketing campaign is tapped. Implementers should navigate the user to a screen within their app where they can set their opt-in marketing preferences.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     You’d adopt this protocol when you want to provide users with a seamless experience in setting their opt-in marketing preferences after interacting with the BuzzBooster SDK’s opt-in marketing campaign.
///     Example:
///     \code
///     class MarketingConsentHandler: NSObject, BSTOptInMarketingCampaignDelegate {
///       func onMoveButtonTapped(in viewController: UIViewController) {
///         // Navigate the user to your app's marketing consent settings screen
///       }
///     }
///
///     let handler = MarketingConsentHandler()
///     BuzzBooster.optInMarketingCampaignDelegate = handler
///
///     \endcode</li>
/// </ul>
SWIFT_PROTOCOL("_TtP14BuzzBoosterSDK33BSTOptInMarketingCampaignDelegate_")
@protocol BSTOptInMarketingCampaignDelegate
- (void)onMoveButtonTappedIn:(UIViewController * _Nonnull)viewController;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14BuzzBoosterSDK19BSTUIViewController")
@interface BSTUIViewController : UIViewController
@property (nonatomic, copy) NSString * _Nullable title;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class BSTUserBuilder;

/// Represents a user within the context of the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     <code>BSTUser</code> is an object that encapsulates information about a user, including their ID, marketing preferences, and any additional properties.
///     It’s important to note that:
///     <ol>
///       <li>
///         The <code>userId</code> should not exceed 40 characters in length.
///       </li>
///       <li>
///         Personal identifiable information, such as email or phone number, should not be used as the <code>userId</code>.
///       </li>
///     </ol>
///   </li>
///   <li>
///     Properties:
///     <ul>
///       <li>
///         <code>userId</code>: A unique identifier for the user.
///       </li>
///       <li>
///         <code>marketingStatus</code>: The marketing preference status for the user.
///       </li>
///       <li>
///         <code>properties</code>: Additional attributes or properties associated with the user.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     To create a <code>BSTUser</code> instance, you can either use the provided builder pattern or directly initialize the object.
///     Using builder pattern:
///     \code
///     let user = BSTUser { builder in
///       builder.userId = "uniqueID123"
///       builder.marketingStatus = .optIn
///       builder.properties = ["age": 25, "location": "Seoul"]
///     }
///
///     \endcode</li>
/// </ul>
SWIFT_CLASS("_TtC14BuzzBoosterSDK7BSTUser")
@interface BSTUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly) enum BSTMarketingStatus marketingStatus;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull properties;
+ (BSTUser * _Nonnull)userWithBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(BSTUserBuilder * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(BSTUserBuilder * _Nonnull))block OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14BuzzBoosterSDK14BSTUserBuilder")
@interface BSTUserBuilder : NSObject
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic) enum BSTMarketingStatus marketingStatus;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull properties;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Represents a user event in the context of the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     <code>BSTUserEvent</code> is a class that encapsulates the details of a specific user event, including its name and any associated values. This event can be generated due to various user interactions within an application.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14BuzzBoosterSDK12BSTUserEvent")
@interface BSTUserEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable values;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines a protocol for objects that want to be notified about user events in the context of the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     <code>BSTUserEventDelegate</code> is a protocol that provides a way for delegate objects to be informed about specific user events when they occur within the BuzzBooster SDK.
///   </li>
///   <li>
///     Requirements:
///     Any object wishing to conform to this protocol should implement the <code>userEventDidOccur(_:)</code> method.
///   </li>
///   <li>
///     Method:
///     <ul>
///       <li>
///         <code>userEventDidOccur(_:)</code>: This method is called whenever a user event occurs within the SDK. The delegate is provided with an instance of <code>BSTUserEvent</code>, which encapsulates details about the specific event.
///       </li>
///     </ul>
///   </li>
///   <li>
///     Usage:
///     Typically, you’d adopt this protocol in cases where you want to handle or track user events and their side-effects in the BuzzBooster SDK.
///     Example:
///     \code
///     class EventTracker: NSObject, BSTUserEventDelegate {
///       func userEventDidOccur(_ userEvent: BSTUserEvent) {
///         // Handle the event, e.g., log it, take some action, etc.
///       }
///     }
///
///     let tracker = EventTracker()
///     BuzzBooster.userEventDelegate = tracker
///
///     \endcode</li>
/// </ul>
SWIFT_PROTOCOL("_TtP14BuzzBoosterSDK20BSTUserEventDelegate_")
@protocol BSTUserEventDelegate
- (void)userEventDidOccur:(BSTUserEvent * _Nonnull)userEvent;
@end


SWIFT_CLASS("_TtC14BuzzBoosterSDK11BuzzBooster")
@interface BuzzBooster : NSObject
/// Delegate for handling events related to the opt-in marketing campaign within the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This property provides a way to set a delegate to respond to specific events or actions tied to the opt-in marketing campaign. By setting this delegate, you can customize or extend the behavior of the SDK when users interact with opt-in marketing prompts or actions.
///   </li>
///   <li>
///     Usage:
///     Assign an instance that conforms to the <code>BSTOptInMarketingCampaignDelegate</code> protocol to this property. This instance will then receive callbacks or delegate methods related to the opt-in marketing campaign.
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) id <BSTOptInMarketingCampaignDelegate> _Nullable optInMarketingCampaignDelegate;)
+ (id <BSTOptInMarketingCampaignDelegate> _Nullable)optInMarketingCampaignDelegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setOptInMarketingCampaignDelegate:(id <BSTOptInMarketingCampaignDelegate> _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSData;
@class UNUserNotificationCenter;
@class UNNotificationResponse;
@class UIApplication;

@interface BuzzBooster (SWIFT_EXTENSION(BuzzBoosterSDK))
/// BuzzBooster SDK Initialization
/// <ul>
///   <li>
///     Overview:
///     To kickstart your integration with the BuzzBooster SDK, the initial step is to initialize the SDK.
///     This ensures that the SDK is configured properly and ready to function as per your application’s needs.
///   </li>
///   <li>
///     Usage:
///     Before using any other functionalities from the BuzzBooster SDK, ensure that you call this method, preferably in the <code>application(_:didFinishLaunchingWithOptions:)</code> method of your <code>AppDelegate</code>.
///     Example:
///     \code
///     let config = BSTConfig { builder in
///         builder.appKey = "YOUR_APP_KEY"
///     }
///     BuzzBoosterSDK.initialize(with: config)
///
///     \endcode</li>
/// </ul>
/// \param config A configuration object (<code>BSTConfig</code>) containing the necessary parameters required for the SDK initialization.
///
+ (void)initializeWithConfig:(BSTConfig * _Nonnull)config;
/// Set or update the user in the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This method allows you to configure or update the current user in the SDK. It’s crucial to ensure that all login methods,
///     whether it’s a direct login or through various SNS services, are handled and the SDK is informed appropriately.
///     Use it when a user logs in or out of your application, or when user details change.
///   </li>
///   <li>
///     Usage:
///     Use this method to set the user information after they log in through your app or any supported SNS login services.
///     Remember to also call this method with <code>nil</code> when the user logs out.
///     Example:
///     \code
///     let user = BSTUser {
///       builder.userId = "1134556"
///     }
///     BuzzBoosterSDK.setUser(user)
///
///     // When user logs out
///     BuzzBoosterSDK.setUser(nil)
///
///     \endcode</li>
/// </ul>
/// \param user An optional <code>BSTUser</code> object representing the user. If the user logs out, pass <code>nil</code> to clear the user information from the SDK.
///
+ (void)setUser:(BSTUser * _Nullable)user;
/// Send an event to the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This method allows you to send an event to the BuzzBooster SDK. When an event is sent, the SDK processes the event name
///     and evaluates it against the criteria for mission achievements in various campaigns. By doing so, it can determine
///     whether a user has met a requirement in a given campaign.
///   </li>
///   <li>
///     Usage:
///     Use this method to notify the SDK of any significant user actions or milestones that may correspond to campaign missions.
///     Example:
///     \code
///     BuzzBoosterSDK.sendEvent("bb_user_purchase_completed")
///
///     \endcode</li>
/// </ul>
/// \param name A <code>String</code> representing the name of the event. This event name will be used to match against campaign
/// mission criteria within the SDK.
///
+ (void)sendEventWithName:(NSString * _Nonnull)name;
/// Send an event with additional values to the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This method allows you to send an event with supplementary values to the BuzzBooster SDK. When an event is sent, the SDK processes the event name
///     along with its accompanying values. It then evaluates these against the criteria for mission achievements in various campaigns. This allows for more
///     nuanced and detailed mission evaluations based on the specific details of an event.
///   </li>
///   <li>
///     Usage:
///     Use this method to notify the SDK of any significant user actions or milestones, and provide any extra details that may be relevant
///     to evaluating campaign missions.
///     Example:
///     \code
///     let purchaseDetails = [
///       "product_id": "12345",
///       "product_name": "Cool Shoes",
///       "price": 99.99
///     ]
///     BuzzBoosterSDK.sendEvent("user_purchase_completed", values: purchaseDetails)
///
///     \endcode</li>
/// </ul>
/// \param name A <code>String</code> representing the name of the event. This event name will be used to match against campaign
/// mission criteria within the SDK.
///
/// \param values A dictionary containing key-value pairs that provide additional context or information about the event.
///
+ (void)sendEventWithName:(NSString * _Nonnull)name values:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Present the BuzzBooster SDK Home screen.
/// <ul>
///   <li>
///     Overview:
///     This method allows you to present the BuzzBooster SDK Home screen to users. Depending on the given <code>viewController</code>, the SDK will decide
///     the best way to display the Home screen. If the <code>viewController</code> has a <code>navigationController</code>, it will push the Home screen onto the navigation stack.
///     If not, it will present the Home screen modally.
///   </li>
///   <li>
///     Usage:
///     Call this method when you want to navigate the user to the SDK’s Home screen from any part of your application.
///     Example:
///     \code
///     let currentViewController = self // Assuming this is called within a UIViewController context
///     BuzzBoosterSDK.showHome(with: currentViewController)
///
///     \endcode</li>
/// </ul>
/// \param viewController The <code>UIViewController</code> from which the SDK’s Home screen should be presented.
///
+ (void)showHomeWithViewController:(UIViewController * _Nonnull)viewController;
/// Retrieve the BuzzBooster SDK’s HomeViewController.
/// <ul>
///   <li>
///     Overview:
///     This method provides direct access to the BuzzBooster SDK’s HomeViewController. This allows you to integrate the Home screen more seamlessly into
///     custom navigation flows or UI designs within your application.
///   </li>
///   <li>
///     Usage:
///     Call this method when you need direct access to the SDK’s HomeViewController, for instance, when integrating it into a custom container view or tab bar.
///     Example:
///     \code
///     let homeVC = BuzzBoosterSDK.getHomeViewController()
///     navigationController?.pushViewController(homeVC, animated: true)
///
///     \endcode</li>
/// </ul>
///
/// returns:
///
/// An instance of <code>UIViewController</code> representing the SDK’s Home screen.
+ (UIViewController * _Nonnull)getHomeViewController SWIFT_WARN_UNUSED_RESULT;
/// Present the BuzzBooster SDK’s Campaign screen for a specific campaign ID.
/// <ul>
///   <li>
///     Overview:
///     This method allows you to present the BuzzBooster SDK’s Campaign screen related to a specific campaign ID. Depending on the provided <code>viewController</code>,
///     the SDK will decide the best way to display the Campaign screen. If the <code>viewController</code> has a <code>navigationController</code>, it will push the Campaign screen onto the navigation stack.
///     Otherwise, it will present the Campaign screen modally.
///   </li>
///   <li>
///     Usage:
///     Call this method when you want to navigate the user to a specific campaign’s screen from any part of your application.
///     Example:
///     \code
///     let currentViewController = self // Assuming this is called within a UIViewController context
///     BuzzBoosterSDK.showCampaign(by: "campaign12345", with: currentViewController)
///
///     \endcode</li>
/// </ul>
/// \param id The unique identifier (<code>String</code>) for the campaign you wish to display.
///
/// \param viewController The <code>UIViewController</code> from which the SDK’s Campaign screen should be presented.
///
+ (void)showCampaignWithId:(NSString * _Nonnull)id viewController:(UIViewController * _Nonnull)viewController;
/// Retrieve the BuzzBooster SDK’s CampaignViewController for a specific campaign ID.
/// <ul>
///   <li>
///     Overview:
///     This method provides direct access to the BuzzBooster SDK’s CampaignViewController related to a specific campaign ID.
///     This allows you to integrate the Campaign screen more flexibly within your custom navigation flows or UI designs.
///   </li>
///   <li>
///     Usage:
///     Use this method when you need direct access to the CampaignViewController for a specific campaign, e.g., when embedding it into a custom container view or tab bar.
///     Example:
///     \code
///     let campaignVC = BuzzBoosterSDK.getCampaignViewController(by: "campaign12345")
///     navigationController?.pushViewController(campaignVC, animated: true)
///
///     \endcode</li>
/// </ul>
/// \param id The unique identifier (<code>String</code>) for the campaign whose view controller you wish to retrieve.
///
///
/// returns:
///
/// An instance of <code>UIViewController</code> representing the specific campaign’s screen.
+ (UIViewController * _Nonnull)getCampaignViewControllerWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
/// Present the BuzzBooster SDK’s Campaign screen for a specific campaign type.
/// <ul>
///   <li>
///     Overview:
///     This method lets you present the BuzzBooster SDK’s Campaign screen for a specific campaign type. Depending on the given <code>viewController</code>,
///     the SDK will decide the most suitable method to display the Campaign screen. If the <code>viewController</code> has a <code>navigationController</code>, it will push the Campaign screen onto the navigation stack.
///     If not, it will present the Campaign screen modally.
///   </li>
///   <li>
///     Usage:
///     Use this method when you want to navigate users to a Campaign screen that corresponds to a specific campaign type from any part of your application.
///     Example:
///     \code
///     let currentViewController = self // Assuming this is called within a UIViewController context
///     BuzzBoosterSDK.showCampaign(by: .discount, with: currentViewController)
///
///     \endcode</li>
/// </ul>
/// \param type The <code>BSTCampaignType</code> indicating the type of campaign you wish to display.
///
/// \param viewController The <code>UIViewController</code> from which the SDK’s Campaign screen should be presented.
///
+ (void)showCampaignWithType:(enum BSTCampaignType)type viewController:(UIViewController * _Nonnull)viewController;
/// Retrieve the BuzzBooster SDK’s CampaignViewController for a specific campaign type.
/// <ul>
///   <li>
///     Overview:
///     This method offers direct access to the BuzzBooster SDK’s CampaignViewController based on a particular campaign type.
///     This facilitates the integration of the Campaign screen into your custom navigation patterns or UI configurations more fluidly.
///   </li>
///   <li>
///     Usage:
///     Use this method when you require direct access to the CampaignViewController for a particular campaign type, such as when incorporating it into a custom container view or tab bar.
///     Example:
///     \code
///     let campaignVC = BuzzBoosterSDK.getCampaignViewController(by: .discount)
///     navigationController?.pushViewController(campaignVC, animated: true)
///
///     \endcode</li>
/// </ul>
/// \param type The <code>BSTCampaignType</code> indicating the type of campaign whose view controller you wish to obtain.
///
///
/// returns:
///
/// An instance of <code>UIViewController</code> representing the campaign screen of the specified type.
+ (UIViewController * _Nonnull)getCampaignViewControllerWithType:(enum BSTCampaignType)type SWIFT_WARN_UNUSED_RESULT;
/// Present the BuzzBooster SDK’s screen for exchanging user points to Naver Pay points.
/// <ul>
///   <li>
///     Overview:
///     This method enables you to display the BuzzBooster SDK’s screen where users can exchange their accumulated points for Naver Pay points. Depending on the provided <code>viewController</code>,
///     the SDK will determine the best approach to present this exchange screen. If the <code>viewController</code> possesses a <code>navigationController</code>, the exchange screen will be pushed onto the navigation stack.
///     If not, it will be presented modally.
///   </li>
///   <li>
///     Usage:
///     Invoke this method when you intend to guide users to the screen for converting their points to Naver Pay points within your application.
///     Example:
///     \code
///     let currentViewController = self // Assuming this is invoked within a UIViewController context
///     BuzzBoosterSDK.showNaverPayExchange(with: currentViewController)
///
///     \endcode</li>
/// </ul>
/// \param viewController The <code>UIViewController</code> from which the SDK’s Naver Pay exchange screen should be presented.
///
+ (void)showNaverPayExchangeWithViewController:(UIViewController * _Nonnull)viewController;
/// Present the BuzzBooster SDK’s screen for a specific page ID.
/// <ul>
///   <li>
///     Overview:
///     This method enables you to display a specific page within the BuzzBooster SDK by providing its unique identifier. The SDK handles the navigation to ensure a seamless transition to the desired page.
///   </li>
///   <li>
///     Usage:
///     Use this method when you want to direct users to a specific page within the SDK from any part of your application.
///     Example:
///     \code
///     BuzzBoosterSDK.showPage(by: "page12345")
///
///     \endcode</li>
/// </ul>
/// \param id The unique identifier (<code>String</code>) for the page you wish to display.
///
+ (void)showPageWithId:(NSString * _Nonnull)id;
/// Present the BuzzBooster SDK’s InAppMessage as a modal, if available.
/// <ul>
///   <li>
///     Overview:
///     This method allows you to present an InAppMessage from the BuzzBooster SDK as a modal. If no message is available (empty), no action will be taken, ensuring that users won’t see an empty or blank modal.
///   </li>
///   <li>
///     Usage:
///     Use this method when you want to show an InAppMessage to the user from any part of your application. Before calling, ensure that there’s an available message to present, or no action will occur.
///     Example:
///     \code
///     BuzzBoosterSDK.showInAppMessage()
///
///     \endcode</li>
/// </ul>
+ (void)showInAppMessageWithViewController:(UIViewController * _Nonnull)viewController;
/// Set the authorization token for processing BuzzBenefit Integration.
/// <ul>
///   <li>
///     Overview:
///     This method lets you provide the authorization token required by the BuzzBooster SDK to process BuzzBenefit integration.
///   </li>
///   <li>
///     Usage:
///     This method should be called whenever you obtain a new authorization otkn from BuzzBenefit.
///     Example:
///     \code
///     BuzzBooster.setAuthorizationToken("exampleTokenStringHere")
///
///     \endcode</li>
/// </ul>
/// \param authorizationToken The authorizatoin token obtained from BuzzBenefit.
///
+ (void)setAuthorizationToken:(NSString * _Nonnull)authorizationToken;
/// Set the device token for receiving push notifications through the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This method lets you provide the device token required by the BuzzBooster SDK to send push notifications to the device. Typically, this device token is obtained from the Apple Push Notification service (APNs) after registering for push notifications in your application.
///   </li>
///   <li>
///     Usage:
///     This method should be called whenever you obtain a new device token from APNs, ensuring that the BuzzBooster SDK can deliver push notifications to the correct device instance.
///     Example:
///     \code
///     func application(
///       _ application: UIApplication,
///       didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data
///     ) {
///       BuzzBoosterSDK.setDeviceToken(token)
///     }
///
///     \endcode</li>
/// </ul>
/// \param token The device token obtained from APNs, which uniquely identifies the app instance for push notifications.
///
+ (void)setDeviceToken:(NSData * _Nonnull)token;
/// Set the string-formatted device token for receiving push notifications through the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This method enables you to provide the device token in a string format required by the BuzzBooster SDK to send push notifications to the device. This is particularly useful if you’re already handling or storing the device token as a string within your application.
///   </li>
///   <li>
///     Usage:
///     Call this method when you have a string-formatted device token, ensuring that the BuzzBooster SDK can dispatch push notifications accurately to the designated device instance.
///     Example:
///     \code
///     let tokenString = "exampleTokenStringHere"
///     BuzzBoosterSDK.setStringDeviceToken(tokenString)
///
///     \endcode</li>
/// </ul>
/// \param token The string-formatted device token which uniquely identifies the app instance for push notifications.
///
+ (void)setPushToken:(NSString * _Nonnull)token;
/// Handle notifications related to the BuzzBooster SDK within the <code>AppDelegate</code>.
/// <ul>
///   <li>
///     Overview:
///     This method processes notifications associated with the BuzzBooster SDK when they are received. It ensures that any action or behavior tied to the notification is appropriately managed within the SDK.
///   </li>
///   <li>
///     Usage:
///     Implement this method within your <code>AppDelegate</code> or any relevant notification handling context, to make sure that notifications pertinent to the BuzzBooster SDK are managed correctly.
///     Example:
///     \code
///     func userNotificationCenter(
///       _ center: UNUserNotificationCenter,
///       didReceive response: UNNotificationResponse,
///       withCompletionHandler completionHandler: @escaping () -> Void
///     ) {
///       BuzzBoosterSDK.userNotificationCenter(
///         center,
///         didReceive: response,
///         withCompletionHandler: completionHandler
///       )
///     }
///
///     \endcode</li>
/// </ul>
/// \param center The shared user notification center object that dispatched the notification.
///
/// \param response The user’s response to the notification. This object encapsulates the user’s response and the associated notification data.
///
/// \param completionHandler A block to execute when you have finished processing the user’s response to a delivered notification.
///
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceive:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Process remote notifications related to the BuzzBooster SDK within the <code>AppDelegate</code>.
/// <ul>
///   <li>
///     Overview:
///     This method is intended to handle remote notifications associated with the BuzzBooster SDK when they are received while the application is in the foreground. It ensures the SDK properly processes the notification data and any associated actions or behaviors.
///   </li>
///   <li>
///     Usage:
///     Implement this method within your <code>AppDelegate</code> to make sure that remote notifications relevant to the BuzzBooster SDK are managed correctly.
///     Example:
///     \code
///     func application(
///       _ application: UIApplication,
///       didReceiveRemoteNotification userInfo: [AnyHashable : Any],
///       fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void
///     ) {
///       BuzzBoosterSDK.application(
///         application,
///         didReceiveRemoteNotification: userInfo,
///         fetchCompletionHandler: completionHandler
///       )
///     }
///
///     \endcode</li>
/// </ul>
/// \param application The singleton app object which has received the remote notification.
///
/// \param userInfo A dictionary that contains information related to the remote notification, primarily the payload.
///
/// \param completionHandler A block to execute once you have finished processing the data associated with the remote notification.
///
+ (void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
/// Add a delegate to handle events related to the opt-in marketing campaign within the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This method is used to add a delegate to manage and respond to specific user events as they occur within the application. By setting this delegate, you can receive callbacks and interact programmatically with events related to the user’s actions and behaviors.
///   </li>
///   <li>
///     Usage:
///     Assign an instance that conforms to the <code>BSTUserEventDelegate</code> protocol to this method. This instance will then be notified of user events, allowing custom handling or responses.
///     Example:
///     \code
///     let userEventDelegate = self // Assuming this is called within a BSTUserEventDelegate context
///     BuzzBoosterSDK.addUserEventDelegate(self)
///
///     \endcode</li>
/// </ul>
/// \param delegate An instance that conforms to the <code>BSTUserEventDelegate</code> protocol.
///
+ (void)addUserEventDelegate:(id <BSTUserEventDelegate> _Nonnull)delegate;
/// Remove a delegate to handle events related to the opt-in marketing campaign within the BuzzBooster SDK.
/// <ul>
///   <li>
///     Overview:
///     This method is used to remove a delegate that manages and responds to specific user events as they occur within the application. By removing this delegate, you will no longer receive callbacks or be able to interact programmatically with events related to the user’s actions and behaviors.
///   </li>
///   <li>
///     Usage:
///     Assign an instance that conforms to the <code>BSTUserEventDelegate</code> protocol to this method.
///     Example:
///     \code
///     let userEventDelegate = self // Assuming this is called within a BSTUserEventDelegate context
///     BuzzBoosterSDK.removeUserEventDelegate(self)
///
///     \endcode</li>
/// </ul>
/// \param delegate An instance that conforms to the <code>BSTUserEventDelegate</code> protocol.
///
+ (void)removeUserEventDelegate:(id <BSTUserEventDelegate> _Nonnull)delegate;
@end

@class BBSEventMapper;
@class WKUserScript;
@class WKScriptMessage;

SWIFT_CLASS("_TtC14BuzzBoosterSDK17BuzzBoosterWebKit")
@interface BuzzBoosterWebKit : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BBSEventMapper * _Nonnull eventMapper;)
+ (BBSEventMapper * _Nonnull)eventMapper SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull handlerName;)
+ (NSString * _Nonnull)handlerName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userScriptSource;)
+ (NSString * _Nonnull)userScriptSource SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) WKUserScript * _Nonnull userScript;)
+ (WKUserScript * _Nonnull)userScript SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)handleWith:(UIViewController * _Nonnull)viewController message:(WKScriptMessage * _Nonnull)message error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)handleWith:(UIViewController * _Nonnull)viewController messageName:(NSString * _Nonnull)messageName messageBody:(id _Nonnull)messageBody error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC14BuzzBoosterSDK28CampaignBannerViewController")
@interface CampaignBannerViewController : UIViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class NSIndexPath;
@class UICollectionViewCell;
@class UIScrollView;

@interface CampaignBannerViewController (SWIFT_EXTENSION(BuzzBoosterSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end
























#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
